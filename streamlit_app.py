#%%
import streamlit as st
import streamlit.components.v1 as components
import pandas as pd
import time
import datetime
import xlsxwriter
from io import BytesIO
from PyPDF2 import PdfMerger
import zipfile
import pypdf
import time
from google.oauth2 import id_token
import google.auth.transport.requests
from google_auth_oauthlib.flow import Flow
import os
import json

# Load client ID from Google credentials JSON file
CLIENT_ID = "528072291091-3nigo5rv42k4lpbuekmv8s9l0lv6i7k5.apps.googleusercontent.com"

# Get Streamlit Cloud URL
STREAMLIT_URL = "https://your-app-name.streamlit.app/"
# Define Google OAuth credentials file (Make sure this file exists!)
GOOGLE_CREDENTIALS_FILE = "client_secrets.json"

# Initialize session state
if "user" not in st.session_state:
    st.session_state.user = None

def google_login():
    """Start Google OAuth login process."""
    try:
        # Load Google OAuth credentials
        flow = Flow.from_client_secrets_file(
            GOOGLE_CREDENTIALS_FILE,
            scopes=["openid", "email", "profile"],
            redirect_uri=STREAMLIT_URL
        )
        
        auth_url, state = flow.authorization_url(prompt="consent")
        
        # Store state in session
        st.session_state["oauth_state"] = state
        
        # Display Google Login button
        st.markdown(f'<a href="{auth_url}" target="_self"><button>Login with Google</button></a>', unsafe_allow_html=True)
    
    except Exception as e:
        st.error(f"Login error: {e}")

def verify_google_token(token):
    """Verify the Google OAuth token and return user info."""
    try:
        idinfo = id_token.verify_oauth2_token(token, google.auth.transport.requests.Request(), None)
        return idinfo  # Contains user email, name, picture, etc.
    except ValueError:
        return None

# Fetch OAuth token from URL (if available)
query_params = st.experimental_get_query_params()
token = query_params.get("token", [None])[0]

if token:
    user_info = verify_google_token(token)
    if user_info:
        st.session_state.user = user_info
        st.success(f"‚úÖ Logged in as: {user_info['email']}")
        st.image(user_info["picture"], width=100)
    else:
        st.error("Google authentication failed.")

# Show login button if user is not logged in
if st.session_state.user is None:
    google_login()
else:
    st.success(f"Welcome, {st.session_state.user['name']}!")
    st.write("You are now logged in! üéâ")
    

#%% function for page '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì vat'
@st.cache_data(show_spinner=False)
def vat_cal_sale_shopee(store, df):

    df = df[~df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'].isin(['‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß'])].drop_duplicates()

    df['year'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'], format = '%Y-%m-%d %H:%M').dt.year #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ ‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏´‡∏°
    df['month'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'], format = '%Y-%m-%d %H:%M').dt.month #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

    #check ‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    if df[df['year'].astype(int) != int(year)].shape[0] != 0 and df[df['year'].astype(int) == int(year)].shape[0] == 0: 
        st.error(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å Shopee: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {month}/{year} ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ' + '--> ‡∏≠‡∏≤‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏¥‡∏î', icon="üö®")
        # st.dataframe(df)
        return None
    
    else:
        if df[(df['year'].astype(int) != int(year)) & (df['month'].astype(int) != int(month))].shape[0] != 0:
            st.warning(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å Shopee: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {month}/{year} ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡∏¥‡∏î‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢' + '--> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', icon="‚ö†Ô∏è")

        #screen out year
        df = df[(df['year'] == int(year)) & (df['month'] == month)].reset_index(drop = True)

        uncompleted_order_count = len(df[df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'] != '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß']['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'].unique().tolist())
        if uncompleted_order_count != 0:
            st.warning(f"‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {store} (Shopee) ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏¢‡∏π‡πà {uncompleted_order_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ --> ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", icon="‚ö†Ô∏è")

        df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'], format = '%Y-%m-%d %H:%M').dt.date
        # shopee_sale_df['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'] = shopee_sale_df['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'].astype(str)
        df = df[['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠)', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏™‡∏∏‡∏ó‡∏ò‡∏¥', '‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢', 
                                        '‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠', '‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà Shopee ‡∏≠‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì', '‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏ô', '‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì']]

        sale_ls = []
        for order_id in df['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'].unique():
            df1 = df[df['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'] == order_id].reset_index(drop = True)
            order_date = df1.loc[0, '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠']
            order_no = df1.loc[0, '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠']
            customer_name = df1.loc[0, '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠)']
            seller_discount_code = float(df1.loc[0, '‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢'])
            include_vat = df1['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏™‡∏∏‡∏ó‡∏ò‡∏¥'].sum() - seller_discount_code
            vat = round((include_vat * 0.07) / 1.07, 2)
            before_vat = include_vat - vat
            status = df1.loc[0, '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠']

            sale_ls.append(['Shopee', store, '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', order_date, status, order_no, customer_name, before_vat, vat, include_vat])

            shipping_fee_from_buyer = df1.loc[0, '‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠']
            if float(shipping_fee_from_buyer) != 0:
                shipping_vat = round((shipping_fee_from_buyer * 0.07) / 1.07, 2)
                shipping_before_vat = shipping_fee_from_buyer - shipping_vat
                sale_ls.append(['Shopee', store, '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', order_date, status, order_no, customer_name, shipping_before_vat, shipping_vat, shipping_fee_from_buyer])

        shopee_sale_df_result = pd.DataFrame(sale_ls, columns = ['platform', 'store_name', 'type', 'order_date', 'status', 'order_no', 'customer_name', 'before_vat', 'vat', 'include_vat'])
        shopee_sale_df_result = shopee_sale_df_result[['platform', 'store_name', 'type', 'order_date', 'status', 'order_no', 'customer_name', 'before_vat', 'vat', 'include_vat']]

        return shopee_sale_df_result
    
@st.cache_data(show_spinner=False)
def vat_cal_sale_lazada(store, df):

    df = df[~df['status'].isin(['canceled', 'returned', 'Package Returned'])].drop_duplicates().reset_index(drop = True)

    df['year'] = pd.to_datetime(df['createTime'], format = '%d %b %Y %H:%M').dt.year #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ ‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏´‡∏°
    df['month'] = pd.to_datetime(df['createTime'], format = '%d %b %Y %H:%M').dt.month #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

    #check ‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    if df[df['year'].astype(int) != int(year)].shape[0] != 0 and df[df['year'].astype(int) == int(year)].shape[0] == 0: 
        st.error(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å Lazada: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏µ {year} / ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ' + ', '.join(df['year'].astype(str).unique().tolist()) + '--> ‡∏≠‡∏≤‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏¥‡∏î', icon="üö®")
        # st.dataframe(df)
        return None
    else:
        if df[(df['year'].astype(int) != int(year)) & (df['month'].astype(int) != int(month))].shape[0] != 0:
            st.warning(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å Lazada: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {month}/{year} ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡∏¥‡∏î‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢' + '--> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', icon="‚ö†Ô∏è")

        #screen out year
        df = df[(df['year'] == int(year)) & (df['month'] == month)].reset_index(drop = True)

        uncompleted_order_count = len(df[df['status'] != 'confirmed']['status'].unique().tolist())
        if uncompleted_order_count != 0:
            st.warning(f"‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {store} (Lazada) ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏¢‡∏π‡πà {uncompleted_order_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ --> ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", icon="‚ö†Ô∏è")
            st.dataframe(df[df['status'] != 'confirmed'])
        ##################################################################################################

    df['createTime'] = pd.to_datetime(df['createTime'], format = '%d %b %Y %H:%M').dt.date
    df = df[['status', 'createTime', 'orderNumber', 'customerName', 'paidPrice', 'sellerDiscountTotal']]

    sale_ls = []
    for order_id in df['orderNumber'].unique():
        df1 = df[df['orderNumber'] == order_id].reset_index(drop = True)

        order_date = df1.loc[0, 'createTime']
        order_no = str(df1.loc[0, 'orderNumber'])
        customer_name = df1.loc[0, 'customerName']
        include_vat = df1['paidPrice'].sum()
        vat = round((include_vat * 0.07) / 1.07, 2)
        before_vat = include_vat - vat

        status = df1.loc[0, 'status']

        sale_ls.append(['Lazada', store, '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', order_date, status, order_no, customer_name, before_vat, vat, include_vat])

    lazada_sale_df_result = pd.DataFrame(sale_ls, columns = ['platform', 'store_name', 'type', 'order_date', 'status', 'order_no', 'customer_name', 'before_vat', 'vat', 'include_vat'])
    lazada_sale_df_result = lazada_sale_df_result[['platform', 'store_name', 'type', 'order_date', 'status', 'order_no', 'customer_name', 'before_vat', 'vat', 'include_vat']]

    return lazada_sale_df_result

@st.cache_data(show_spinner=False)
def vat_cal_sale_tiktok(store, df): 
    df = df[~df['Order Status'].isin(['Canceled'])]
    df = df[df['Order Status'] != 'Canceled'].drop_duplicates().reset_index(drop = True)

    df['year'] = pd.to_datetime(df['Created Time'], format = '%d/%m/%Y %H:%M:%S\t').dt.year #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ ‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏´‡∏°
    df['month'] = pd.to_datetime(df['Created Time'], format = '%d/%m/%Y %H:%M:%S\t').dt.month #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

    #check ‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    if df[df['year'].astype(int) != int(year)].shape[0] != 0 and df[df['year'].astype(int) == int(year)].shape[0] == 0: 
        st.error(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} | TikTok: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏µ {year} / ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ' + ', '.join(df['year'].astype(str).unique().tolist()) + '--> ‡∏≠‡∏≤‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏¥‡∏î', icon="üö®")
        return None
    else:
        if df[(df['year'].astype(int) != int(year)) & (df['month'].astype(int) != int(month))].shape[0] != 0:
            st.warning(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} | TikTok: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {month}/{year} ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡∏¥‡∏î‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢' + '--> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', icon="‚ö†Ô∏è")

        #screen out year
        df = df[(df['year'] == int(year)) & (df['month'] == month)].reset_index(drop = True)

        uncompleted_order_count = len(df[df['Order Status'] != 'Completed']['Order Status'].unique().tolist())
        if uncompleted_order_count != 0:
            st.warning(f"‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {store} (TikTok) ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏¢‡∏π‡πà {uncompleted_order_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ --> ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", icon="‚ö†Ô∏è")
            ##########


    df['SKU Subtotal Before Discount'] = df['SKU Subtotal Before Discount'].str.replace('THB ', '').str.replace(',', '').astype(float)
    df['SKU Seller Discount'] = df['SKU Seller Discount'].str.replace('THB ', '').str.replace(',', '').astype(float)
    df['Shipping Fee After Discount'] = df['Shipping Fee After Discount'].str.replace('THB ', '').str.replace(',', '').astype(float)
    df = df[['Order Status', 'Created Time', 'Order ID', 'Buyer Username', 'SKU Subtotal Before Discount', 'SKU Seller Discount',
                                    'Shipping Fee After Discount']]

    sale_ls = []
    for order_id in df['Order ID'].unique():
        df1 = df[df['Order ID'] == order_id].reset_index(drop = True)

        order_date = df1.loc[0, 'Created Time']
        order_no = str(df1.loc[0, 'Order ID']).replace('\t', '')
        customer_name = df1.loc[0, 'Buyer Username']
        seller_discount_code = float(df1['SKU Seller Discount'].sum())
        include_vat = df1['SKU Subtotal Before Discount'].sum() - seller_discount_code
        vat = round((include_vat * 0.07) / 1.07, 2)
        before_vat = include_vat - vat

        status = df1.loc[0, 'Order Status']

        sale_ls.append(['TikTok', store, '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', order_date, status, order_no, customer_name, before_vat, vat, include_vat])


        shipping_fee_from_buyer = df1.loc[0, 'Shipping Fee After Discount']

        if float(shipping_fee_from_buyer) != 0:
            shipping_vat = round((shipping_fee_from_buyer * 0.07) / 1.07, 2)
            shipping_before_vat = shipping_fee_from_buyer - shipping_vat
            sale_ls.append(['TikTok', store, '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', order_date, status, order_no, customer_name, shipping_before_vat, shipping_vat, shipping_fee_from_buyer])


    tiktok_sale_df_result = pd.DataFrame(sale_ls, columns = ['platform', 'store_name', 'type', 'order_date', 'status', 'order_no', 'customer_name', 'before_vat', 'vat', 'include_vat'])
    tiktok_sale_df_result = tiktok_sale_df_result[['platform', 'store_name', 'type', 'order_date', 'status', 'order_no', 'customer_name', 'before_vat', 'vat', 'include_vat']]

    return tiktok_sale_df_result  

@st.cache_data(show_spinner=False)
def vat_cal_commission_shopee(store_name, zip_file):
    ls = []
    pdf_ls = []
    # store = key.split('_')[0]

    # if store not in st.session_state['commission_d'].keys():
    #     st.session_state['commission_d'][store] = {}

    with zipfile.ZipFile(zip_file, 'r') as z:
        sorted_file_ls = ['-'.join(ls) for ls in sorted([n.split('-') for n in z.namelist() if 'SPX' not in n], key = lambda x: int(x[4]))]
        progress_bar = st.progress(0, text = 'processing shopee commission pdf')
                            
        for i, file_name in enumerate(sorted_file_ls):
            if 'SPX' in file_name:
                progress_bar.progress((i + 1) / len(sorted_file_ls), text='reading shopee commission pdf files')
            else:
                pdf_file = pypdf.PdfReader(BytesIO(z.read(file_name)))

                doc_date, doc_num, issued_company, before_vat, vat, company_name, company_tax_id = None, None, None, None, None, None, None
                # st.write(pdf_file.pages[0].extract_text().split('\n'))
                # break
                for j, text in enumerate(pdf_file.pages[0].extract_text().split('\n')):
                    if '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' in text and '‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' not in text:
                        doc_date = pd.to_datetime(text.split(' ')[-1], format = '%d/%m/%Y').date()
                    elif 'Co.,' in text:
                        issued_company = text
                    elif '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà' in text:
                        # st.write(text)
                        doc_num = text.split('No. ')[-1] + ' ' + pdf_file.pages[0].extract_text().split('\n')[j + 1]
                        if '‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ' in text:
                            company_tax_id = text.split('Tax ID ')[1].split('‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà/')[0]
                    elif '‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ' in text:
                        company_tax_id = text.split('Tax ID ')[1].split('‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà/')[0]
                    elif 'after discount' in text:
                        before_vat = round(float(text.split(' ')[-1].replace(',', '')), 2)
                    elif 'VAT' in text and '7%' in text:
                        vat = round(float(text.split(' ')[-1].replace(',', '')), 2)
                    elif 'Customer name' in text:
                        company_name = text.split('Customer name ')[-1]
                                
            if None in [doc_date, company_name, company_tax_id, issued_company, doc_num, before_vat, vat]:
                st.error(f'something wrong with {store} Shopee commission file: {file_name}', icon="üö®")
                # st.write([doc_date, company_name, company_tax_id, issued_company, doc_num, before_vat, vat])
                # st.write(pdf_file.pages[0].extract_text().split('\n'))
                return None
            else:
                ls.append([store_name, 'Shopee', doc_date, company_name, company_tax_id, issued_company, doc_num, before_vat, vat])
                pdf_ls.append([company_name, 'Shopee', company_tax_id, doc_date, BytesIO(z.read(file_name)), store_name])
                progress_bar.progress((i + 1) / len(sorted_file_ls), text = f'reading {store} Shopee commission files')

        progress_bar.empty()

    return  {
        'commission_df': pd.DataFrame(ls, columns = ['store_name', 'platform', 'doc_date', 'company_name', 'company_tax_id', 'issue_comapny', 'doc_num', 'before_vat', 'vat']), 
        'pdf_df': pd.DataFrame(pdf_ls, columns = ['company_name', 'platform', 'company_tax_id', 'doc_date', 'pdf_file', 'store_name'])
        }

@st.cache_data(show_spinner=False)
def vat_cal_commission_lazada(store_name, file_ls):
    ls = []
    pdf_ls = []
    doc_num_ls = []

    progress_bar = st.progress(0, text = 'processing Lazada commission pdf')
    for file_order, file_name in enumerate(file_ls):
        pdf_file = pypdf.PdfReader(file_name)

        if 'Lazada Express Limited' in pdf_file.pages[0].extract_text() or 'Shipping Fee' in pdf_file.pages[0].extract_text():
            progress_bar.progress((file_order + 1) / len(file_ls), text = 'reading Lazada commission pdf files')
        
        else: 
            doc_date, doc_num, issued_company, before_vat, vat, company_name, company_tax_id = None, None, None, None, None, None, None

            #‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ 'TAX INVOICE / RECEIPT'
            if 'TAX INVOICE / RECEIPT' in pdf_file.pages[0].extract_text():
                # st.write(pdf_file.pages[0].extract_text().split('\n'))
                for j, text in enumerate(pdf_file.pages[0].extract_text().split('\n')):
                    if 'Invoice Date' in text:
                        doc_date = pd.to_datetime(text.split(': ')[-1], format = '%Y-%m-%d').date()
                    elif 'Lazada' in text:
                        issued_company = text
                    elif 'Total' in text and '(Including Tax)' not in text:
                        before_vat = float(text.split(' ')[-1].replace(',', ''))
                    elif '7% (VAT)' in text:
                        vat = float(text.split(') ')[-1].replace(',', ''))
                    elif 'Invoice No.:' in text:
                        doc_num = text.split(' ')[-1]
                    elif 'TAX INVOICE / RECEIPT' in text:
                        company_name = pdf_file.pages[0].extract_text().split('\n')[j + 2]
                        company_tax_id = pdf_file.pages[0].extract_text().split('\n')[j + 7].split('Tax ID: ')[-1].split('Invoice')[0]

                    # break
            
            #‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô --> ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏Ñ‡∏∑‡∏≠ ‡πÉ‡∏ö‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
            elif 'CREDIT NOTE' in pdf_file.pages[0].extract_text() and 'Reversal Commission' in pdf_file.pages[0].extract_text():
                # st.write(pdf_file.pages[0].extract_text().split('\n'))
                for j, text in enumerate(pdf_file.pages[0].extract_text().split('\n')):
                    if 'Date: ' in text:
                        doc_date = pd.to_datetime(text.split(': ')[-1], format = '%Y-%m-%d').date()
                    elif 'Lazada' in text:
                        issued_company = text
                    elif 'Total' in text and '(Including Tax)' not in text:
                        before_vat = float(text.split(' ')[-1].replace(',', '')) * -1
                    elif '7% (VAT)' in text:
                        vat = float(text.split(') ')[-1].replace(',', '')) * -1
                    elif 'CREDIT NOTE' in text:
                        company_name = pdf_file.pages[0].extract_text().split('\n')[j + 2].replace('  ', ' ')
                        company_tax_id = pdf_file.pages[0].extract_text().split('\n')[j + 7].split('Tax ID: ')[-1].split('Credit Note')[0]
                    elif 'Credit Note: ' in text:
                        doc_num = text.split('Credit Note: ')[-1]
                    
            if None in [doc_date, company_name, company_tax_id, issued_company, doc_num, before_vat, vat]:
                st.error(f'something wrong with {store_name} Lazada commission file: {file_name}', icon="üö®")
                # st.write([doc_date, company_name, company_tax_id, issued_company, doc_num, before_vat, vat])
                return None
            elif doc_num in doc_num_ls: #‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô ‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ã‡πâ‡∏≥ ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡∏ã‡πâ‡∏≥
                progress_bar.progress((file_order + 1) / len(file_ls), text = 'reading Lazada commission pdf files')
            else:
                ls.append([store_name, 'Lazada', doc_date, company_name, company_tax_id, issued_company, doc_num, before_vat, vat])
                pdf_ls.append([company_name, 'Lazada', company_tax_id, doc_date, file_name, store_name])
                doc_num_ls.append(doc_num) #‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡∏Å‡∏±‡∏ô ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ñ‡∏ô‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏ã‡πâ‡∏≥
                progress_bar.progress((i + 1) / len(file_ls), text = f'reading {store_name} Shopee commission files')

        progress_bar.progress((file_order + 1) / len(file_ls), text = 'reading Lazada commission pdf files')

    progress_bar.empty()

    return {
        'commission_df': pd.DataFrame(ls, columns = ['store_name', 'platform', 'doc_date', 'company_name', 'company_tax_id', 'issue_comapny', 'doc_num', 'before_vat', 'vat']), 
        'pdf_df': pd.DataFrame(pdf_ls, columns = ['company_name', 'platform', 'company_tax_id', 'doc_date', 'pdf_file', 'store_name'])
    }


st.cache_data(show_spinner = False)
def vat_cal_commission_tiktok(store_name, zip_file):
    ls = []
    pdf_ls = []

    progress_bar = st.progress(0, text = 'processing TikTok commission pdf')
    with zipfile.ZipFile(zip_file,'r') as z:
        sorted_file_ls = sorted([n for n in z.namelist() if 'THJV' not in n and 'TTSTHAC' not in n])
        progress_bar = st.progress(0, text = 'processing tiktok commission pdf')

        for i, file_name in enumerate(sorted_file_ls):
            if 'THJV' in file_name or 'TTSTHAC' in file_name:
                progress_bar.progress((i + 1) / len(sorted_file_ls), text='reading tiktok commission pdf files')
            else:
                # pdf_file = pypdf.PdfReader(BytesIO(z.read(file_name)))
                pdf_file = pypdf.PdfReader(BytesIO(z.read(file_name)))
                doc_date, doc_num, issued_company, before_vat, vat, company_name, company_tax_id = None, None, None, None, None, None, None
                for j, text in enumerate(pdf_file.pages[0].extract_text().split('\n')):
                    if 'Invoice date' in text:
                        doc_date = pd.to_datetime(text.split(' : ')[-1], format = '%b %d, %Y').date()
                    elif 'Ltd.' in text and 'prepared by' not in text and 'For corporate' not in text:
                        issued_company = text
                    elif 'Invoice number : ' in text:
                        doc_num = text.split('Invoice number : ')[-1]
                    elif 'Subtotal (excluding VAT)' in text:
                        before_vat = float(text.split(' ')[-1].replace(',', '').replace('‡∏ø', ''))
                    elif 'Total VAT' in text and '7%' in text:
                        vat = float(text.split(' ')[-1].replace(',', '').replace('‡∏ø', '')) 
                    elif 'Client Name' in text:
                        company_name = text.split('Client Name: ')[-1]
                    elif 'Tax ID:' in text:
                        company_tax_id = text.split(': ')[-1]

                if None in [doc_date, company_name, company_tax_id, issued_company, doc_num, before_vat, vat]:
                    st.error(f'something wrong with {store} TikTok commission file: {file_name}', icon="üö®")
                    return None
                else:
                    ls.append([store_name, 'TikTok', doc_date, company_name, company_tax_id, issued_company, doc_num, before_vat, vat])
                    pdf_ls.append([company_name, 'TikTok', company_tax_id, doc_date, BytesIO(z.read(file_name)), store_name])
                    progress_bar.progress((i + 1) / len(sorted_file_ls), text = f'reading {store} Shopee commission files')

        
        progress_bar.empty()
        return {
                'commission_df': pd.DataFrame(ls, columns = ['store_name', 'platform', 'doc_date', 'company_name', 'company_tax_id', 'issue_comapny', 'doc_num', 'before_vat', 'vat']), 
                'pdf_df': pd.DataFrame(pdf_ls, columns = ['company_name', 'platform', 'company_tax_id', 'doc_date', 'pdf_file', 'store_name'])
            }
        
        progress_bar.empty()
#%% sidebar
# st.set_page_config(layout="wide")

with st.sidebar:
    st.subheader('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ')
    store_number = st.selectbox(
        label = '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ', 
        options = [i for i in range(1, 4)],
        label_visibility = 'collapsed'
    )

    st.divider()

    st.subheader('‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤')
    store_name_ls = []
    for i in range(store_number):
        store_name = st.text_input(
            label = f'‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ #{i + 1}', 
            label_visibility = 'visible'
            )
        if store_name in store_name_ls and store_name != '':
            st.error('‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≥')
            break
        store_name_ls.append(store_name)

    st.divider()
    st.subheader('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì')
    sidebar_radio = st.radio(
        label = '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì',
        options = ['‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏î VAT ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á', '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì VAT', '‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ'], 
        index = 1, 
        label_visibility = 'collapsed'
    )
#%%
if sidebar_radio == '‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏î VAT ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á':

    st.write('')
    st.header(f'üëçVAT cal: {sidebar_radio}')
    st.divider()
    st.subheader('1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì')
    selected_year = st.selectbox(
        label = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì",
        options = (str(pd.Timestamp.today().year), (str(pd.Timestamp.today().year - 1) + ' (‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏î vat ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏∂‡∏õ‡∏•‡πà‡∏≤‡∏ß)')), 
        label_visibility = 'collapsed'
    )
    selected_year = selected_year.split(' ')[0]
    current_time = pd.to_datetime('today') + pd.Timedelta(hours = 7)
    current_day = pd.to_datetime('today').day
    current_year = pd.to_datetime('today').year
    current_month = pd.to_datetime('today').month
    is_full_year = True if current_year - 1 == int(selected_year) else True if current_month == 12 and current_day == 31 else False

    ############################################################
    if len([store_name for store_name in store_name_ls if store_name != '']) == store_number:
        st.divider()
        st.subheader('2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å platform ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà')
        # st.markdown(f'<h4>2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å platform ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà</h4>', unsafe_allow_html=True)
        tick_cols = st.columns(store_number)

        for i, store_name in enumerate(store_name_ls):
            with tick_cols[i]:
                st.markdown(f'<h5>&emsp;‚ú®‡∏£‡πâ‡∏≤‡∏ô {store_name}</h5>', unsafe_allow_html=True)
                for platform in ['Shopee', 'Lazada', 'TikTok']:
                    st.checkbox(label=f'{platform}', value = True, key = 'tick_' + store_name + '_' + platform)
        
        ########################################################
        st.divider()
        st.subheader(f'3. upload files ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ {selected_year})')
        st.divider()
        for store_order, store_name in enumerate(store_name_ls):
            st.markdown(f'<h4>üìç 3.{store_order + 1} ‡∏£‡πâ‡∏≤‡∏ô {store_name}</h4>', unsafe_allow_html=True)
            ###### part upload file ######
            platform_order = 0
            for platform in ['Shopee', 'Lazada', 'TikTok']:
                if st.session_state['tick_' + store_name + '_' + platform]: #
                    platform_order += 1
                    st.markdown(f'<h5>&ensp;&ensp;{"üü† " if platform == "Shopee" else "üîµ " if platform == "Lazada" else "‚ö´ "} {platform}</h5>', unsafe_allow_html=True)

                    ################# upload shopee #################
                    if platform == 'Shopee': 
                        with st.expander("üî∏‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á Shopee ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô ?"):
                            st.write('''
                                1. Log in ‡πÄ‡∏Ç‡πâ‡∏≤ Shopee Seller Center\n
                                2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"\n
                                3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"\n
                                4. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î"\n 
                                5. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤\n
                                \n
                                ** **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏**: ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á Shopee ‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡∏•‡∏∞ 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                                ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å
                                ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏î vat ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
                            ''')

                        shopee_files = st.file_uploader(
                            label = f'upload ‡πÑ‡∏ü‡∏•‡πå (.xlsx) ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢', 
                            accept_multiple_files = True,
                            type = 'xlsx', 
                            key = f'{store_name}_{platform}_raw_file'
                        )
                        if st.session_state[f'{store_name}_{platform}_raw_file'] != []:
                            st.success(f'‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', icon="‚úÖ")
                        

                    ################# upload lazada #################
                    elif platform == 'Lazada':
                        with st.expander("üîπ‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á Lazada ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô ?"):
                            st.write('''
                                1. Log in ‡πÄ‡∏Ç‡πâ‡∏≤ Lazada Seller Center
                                2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"\n
                                3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"\n
                                4. ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" -> "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á" ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤ (‡∏™‡∏≤‡∏°‡∏≤‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ)\n 
                                5. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Export" ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Export All"\n
                            ''')

                        lazada_file = st.file_uploader(
                            label = f'upload ‡πÑ‡∏ü‡∏•‡πå (.xlsx) ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏Ñ‡πà 1 ‡πÑ‡∏ü‡∏•‡πå', 
                            accept_multiple_files = False, 
                            type = 'xlsx',
                            key = f'{store_name}_{platform}_raw_file'
                        )
                        if lazada_file != None:
                            st.success(f'‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', icon="‚úÖ")

                    elif platform == 'TikTok':    
                        with st.expander("‚ñ™Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á TikTok ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô ?"):
                            st.write('''
                                1. Log in ‡πÄ‡∏Ç‡πâ‡∏≤ TikTok Seller Center
                                2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" -> "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"\n
                                3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"\n
                                4. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á"\n 
                                5. ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á "‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á" ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏™‡∏≤‡∏°‡∏≤‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ)\n
                                6. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ"\n
                                7. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î"\n
                                8. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "CSV" ‡πÅ‡∏•‡∏∞‡∏Å‡∏î "‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å"\n
                                9. ‡∏Å‡∏î "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î"\n     
                            ''')

                        tiktok_file = st.file_uploader(
                            label = f'upload ‡πÑ‡∏ü‡∏•‡πå (.csv) ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏Ñ‡πà 1 ‡πÑ‡∏ü‡∏•‡πå', 
                            accept_multiple_files = False, 
                            type = 'csv',
                            key = f'{store_name}_{platform}_raw_file'
                        )   
                        if tiktok_file != None:
                            st.success(f'‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', icon="‚úÖ")
                    
                    # st.markdown('##')
                    st.text("")
                    st.text("")
                    # st.markdown("***")

                else: #‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡πâ‡∏Å platform ‡∏ô‡∏µ‡πâ
                    pass

            st.divider()


        #show ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        # check ‡∏ß‡πà‡∏≤ upload file ‡∏Ç‡∏≠‡∏á platform ‡∏¢‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡πâ‡∏Å‡∏°‡∏≤‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏∂‡∏¢‡∏±‡∏á
        tick_ls = [key  for key, value in st.session_state.items() if 'tick' in key and value == True]
        check_d = {tick.replace('tick_', '')+'_raw_file': st.session_state[tick.replace('tick_', '')+'_raw_file'] for tick in tick_ls}

        if None in check_d.values(): 
            st.markdown("<h5 style='text-align: center'>upload file ‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì</g5>", unsafe_allow_html=True)
        else:
            col1, col2, col3 = st.columns(3)
            cont = False
            with col2:
                if st.button('‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì', use_container_width = True):
                    total_sale = 0
                    df_dict = {}
                    cont = True


            if cont:          
                for key, value in st.session_state.items():
                    if 'raw_file' in key and 'Shopee' in key:
                        store = key.split('_')[0]
                        if store not in df_dict.keys():
                            df_dict[store] = {}

                        #shopee uploaded files are in list
                        df = pd.concat([pd.read_excel(f, converters = {'‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠': str}) for f in value], axis = 0)
                        
                        df = df[~df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'].isin(['‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß'])].drop_duplicates()
                        df['year'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'], format = '%Y-%m-%d %H:%M').dt.year #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ ‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏´‡∏°
                        df['month'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'], format = '%Y-%m-%d %H:%M').dt.month #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

                        #check ‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                        if df[df['year'].astype(int) != int(selected_year)].shape[0] != 0 and df[df['year'].astype(int) == int(selected_year)].shape[0] == 0: 
                            st.error(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å Shopee: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏µ {selected_year} / ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ' + ', '.join(df['year'].astype(str).unique().tolist()) + '--> ‡∏≠‡∏≤‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏¥‡∏î', icon="üö®")
                            cont = False
                            break
                        else:
                            if df[df['year'].astype(int) != int(selected_year)].shape[0] != 0:
                                st.warning(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å Shopee ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ ' + ', '.join([y for y in df['year'].astype(str).unique().tolist() if y != selected_year]) +'‡∏ï‡∏¥‡∏î‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢' + '--> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', icon="‚ö†Ô∏è")
                            
                            #screen out year
                            df = df[df['year'] == int(selected_year)]

                            #check ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
                            ##################################################################################################
                            missing_month_ls = [m for m in [i for i in range(1, 13 if is_full_year else current_month + 1)] if m not in sorted(df['month'].unique().tolist())]

                            if is_full_year: #get month_ls
                                month_ls = [i for i in range(1, 13)]
                            else: #not full year
                                if current_month == 1:
                                    month_ls = [1]
                                else:
                                    month_ls = [m for m in range(1, current_month)]
                            missing_month_ls = [str(m) for m in month_ls if m not in df['month'].unique().tolist()]

                            #‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
                            if missing_month_ls != []:
                                st.warning(f'‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ; ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {store} ‡∏à‡∏≤‡∏Å Shopee ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà {",".join(missing_month_ls)}', icon="‚ö†Ô∏è")
                            
                            #screen out current month if current month != 1
                            if current_month == 1 and selected_year == current_year: #‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1
                                st.warning('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 1 ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏∞‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', icon="‚ÑπÔ∏è")

                                date_ls = sorted(pd.date_range(start = f'1/1/{selected_year}', end = current_time.strftime('%d/%m/%Y'), freq= 'D'))
                            else:
                                if selected_year == current_year: #‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 1 ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ ‡∏õ‡∏à‡∏ö
                                    st.info('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏∂‡∏á‡πÅ‡∏Ñ‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì', icon="‚ÑπÔ∏è")
                                    df = df[df['month'] != current_month].reset_index(drop = True)
                        
                                    last_day_of_last_month = (current_time.replace(day = 1) - pd.Timedelta(days = 1)).strftime('%d/%m/%Y')
                                    date_ls = sorted(pd.date_range(start = f'1/1/{selected_year}', end = last_day_of_last_month, freq = 'D'))

                                else: #‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
                                    date_ls = sorted(pd.date_range(start = f'1/1/{selected_year}', end = f'31/12/{selected_year}', freq = 'D'))

                            
                            uncompleted_order_count = len(df[df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'] != '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß']['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'].unique().tolist())
                            if uncompleted_order_count != 0:
                                st.warning(f"‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {store} ‡∏à‡∏≤‡∏Å Shopee  ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏¢‡∏π‡πà {uncompleted_order_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ --> ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", icon="‚ö†Ô∏è")
                            ##################################################################################################

                            df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'], format = '%Y-%m-%d %H:%M').dt.date

                            shopee_ls = []
                            for date in date_ls:
                                df1 = df[df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'] == date.date()]

                                if df1.shape[0] == 0:
                                    shopee_ls.append([date.strftime('%Y-%m-%d'), None, None])
                                else:
                                    order_value = 0
                                    shipping_value = 0

                                    for order_id in df1['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'].unique():
                                        df2 = df1[df1['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'] == order_id].reset_index(drop = True)
                                        order_value += df2['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏™‡∏∏‡∏ó‡∏ò‡∏¥'].sum() - float(df2['‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢'].tolist()[0])
                                        shipping_value += float(df2['‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠'].tolist()[0])
                                        
                                    shopee_ls.append([date.strftime('%Y-%m-%d'), order_value, shipping_value])     

                            shopee_result_df = pd.DataFrame(shopee_ls, columns = ['date', 'order_value', f'shipping_value']).fillna(0)
                            shopee_result_df = shopee_result_df.set_index('date')
                            shopee_result_df = shopee_result_df[['order_value', 'shipping_value']]
                            shopee_result_df.columns = pd.MultiIndex.from_arrays([[store+'_shopee', store+'_shopee'], shopee_result_df.columns.tolist()])

                            total_sale += shopee_result_df[store+'_shopee']['order_value'].sum() + shopee_result_df[store+'_shopee']['shipping_value'].sum()

                            df_dict[store]['Shopee'] = shopee_result_df


                    elif 'raw_file' in key and 'Lazada' in key:
                        store = key.split('_')[0]
                        if store not in df_dict.keys():
                            df_dict[store] = {}

                        df = pd.read_excel(value, converters={'orderNumber':str})
                        df = df[~df['status'].isin(['canceled', 'returned', 'Package Returned'])]

                        df['year'] = pd.to_datetime(df['createTime'], format = '%d %b %Y %H:%M').dt.year #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ ‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏´‡∏°
                        df['month'] = pd.to_datetime(df['createTime'], format = '%d %b %Y %H:%M').dt.month #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

                        #check ‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                        if df[df['year'].astype(int) != int(selected_year)].shape[0] != 0 and df[df['year'].astype(int) == int(selected_year)].shape[0] == 0: 
                            st.error(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏Ç‡∏≠‡∏á Lazada: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏µ {selected_year} / ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ' + ', '.join(df['year'].astype(str).unique().tolist()) + '--> ‡∏≠‡∏≤‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏¥‡∏î', icon="üö®")
                            break
                        else:
                            if df[df['year'].astype(int) != int(selected_year)].shape[0] != 0:
                                st.warning(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å Lazada ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ ' + ', '.join([y for y in df['year'].astype(str).unique().tolist() if y != selected_year]) +'‡∏ï‡∏¥‡∏î‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢' + '--> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', icon="‚ö†Ô∏è")

                            #screen out year
                            df = df[df['year'] == int(selected_year)]

                            #check ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
                            ##################################################################################################
                            missing_month_ls = [m for m in [i for i in range(1, 13 if is_full_year else current_month + 1)] if m not in sorted(df['month'].unique().tolist())]

                            if is_full_year: #get month_ls
                                month_ls = [i for i in range(1, 13)]
                            else: #not full year
                                if current_month == 1:
                                    month_ls = [1]
                                else:
                                    month_ls = [m for m in range(1, current_month)]
                            missing_month_ls = [str(m) for m in month_ls if m not in df['month'].unique().tolist()]

                            #‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
                            if missing_month_ls != []:
                                st.warning(f'‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ; ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {store} ‡∏à‡∏≤‡∏Å Lazada ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà {",".join(missing_month_ls)}', icon="‚ö†Ô∏è")
                            
                            #screen out current month if current month != 1
                            if current_month == 1 and selected_year == current_year: #‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1
                                st.warning('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 1 ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏∞‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏∞', icon="‚ÑπÔ∏è")

                                date_ls = sorted(pd.date_range(start = f'1/1/{selected_year}', end = current_time.strftime('%d/%m/%Y'), freq= 'D'))
                            else:
                                if selected_year == current_year: #‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 1 ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ ‡∏õ‡∏à‡∏ö
                                    st.info('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏∂‡∏á‡πÅ‡∏Ñ‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì', icon="‚ÑπÔ∏è")
                                    df = df[df['month'] != current_month].reset_index(drop = True)
                                    
                                    last_day_of_last_month = (current_time.replace(day = 1) - pd.Timedelta(days = 1)).strftime('%d/%m/%Y')
                                    date_ls = sorted(pd.date_range(start = f'1/1/{selected_year}', end = last_day_of_last_month, freq = 'D'))
                                else: #‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
                                    date_ls = sorted(pd.date_range(start = f'1/1/{selected_year}', end = f'31/12/{selected_year}', freq = 'D'))
                            
                            uncompleted_order_count = len(df[df['status'] != 'confirmed']['status'].unique().tolist())
                            if uncompleted_order_count != 0:
                                st.warning(f"‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {store} ‡∏à‡∏≤‡∏Å Lazada ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏¢‡∏π‡πà {uncompleted_order_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ --> ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", icon="‚ö†Ô∏è")
                                st.dataframe(df[df['status'] != 'confirmed'])
                            ##################################################################################################

                            df['createTime'] = pd.to_datetime(df['createTime'], format = '%d %b %Y %H:%M').dt.date

                            lazada_ls = []
                            for date in date_ls:
                                df1 = df[df['createTime'] == date.date()]

                                if df1.shape[0] == 0:
                                    lazada_ls.append([date.strftime('%Y-%m-%d'), None, None])
                                else:
                                    order_value = df1['paidPrice'].sum()
                                    shipping_value = None
                                    lazada_ls.append([date.strftime('%Y-%m-%d'), order_value, shipping_value])

                            lazada_result_df = pd.DataFrame(lazada_ls, columns = ['date', 'order_value', 'shipping_value']).fillna(0)
                            lazada_result_df = lazada_result_df.set_index('date')
                            lazada_result_df = lazada_result_df[['order_value', 'shipping_value']]
                            lazada_result_df.columns = pd.MultiIndex.from_arrays([[store+'_lazada', store+'_lazada'], lazada_result_df.columns.tolist()])

                            total_sale += lazada_result_df[store+'_lazada']['order_value'].sum() + lazada_result_df[store+'_lazada']['shipping_value'].sum()

                            df_dict[store]['Lazada'] = lazada_result_df
                    
                    elif 'raw_file' in key and 'TikTok' in key:
                        store = key.split('_')[0]
                        if store not in df_dict.keys():
                            df_dict[store] = {}

                        df = pd.read_csv(value, converters={'Order ID':str})
                        df = df[df['Order Status'] != 'Canceled'].drop_duplicates().reset_index(drop = True)

                        df['year'] = pd.to_datetime(df['Created Time'], format = '%d/%m/%Y %H:%M:%S\t').dt.year #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ ‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏´‡∏°
                        df['month'] = pd.to_datetime(df['Created Time'], format = '%d/%m/%Y %H:%M:%S\t').dt.month #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

                        #check ‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                        if df[df['year'].astype(int) != int(selected_year)].shape[0] != 0 and df[df['year'].astype(int) == int(selected_year)].shape[0] == 0: 
                            st.error(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å TikTok: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏µ {selected_year} / ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ' + ', '.join(df['year'].astype(str).unique().tolist()) + '--> ‡∏≠‡∏≤‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏¥‡∏î', icon="üö®")
                            break
                        else:
                            if df[df['year'].astype(int) != int(selected_year)].shape[0] != 0:
                                st.warning(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å TikTok ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ ' + ', '.join([y for y in df['year'].astype(str).unique().tolist() if y != selected_year]) +'‡∏ï‡∏¥‡∏î‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢' + '--> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', icon="‚ö†Ô∏è")
                            
                            #screen out year
                            df = df[df['year'] == int(selected_year)]

                            #check ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
                            ##################################################################################################
                            missing_month_ls = [m for m in [i for i in range(1, 13 if is_full_year else current_month + 1)] if m not in sorted(df['month'].unique().tolist())]

                            if is_full_year: #get month_ls
                                month_ls = [i for i in range(1, 13)]
                            else: #not full year
                                if current_month == 1:
                                    month_ls = [1]
                                else:
                                    month_ls = [m for m in range(1, current_month)]
                            missing_month_ls = [str(m) for m in month_ls if m not in df['month'].unique().tolist()]

                            #‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
                            if missing_month_ls != []:
                                st.warning(f'‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ; ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {store} ‡∏à‡∏≤‡∏Å TikTok ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà {", ".join(missing_month_ls)}', icon="‚ö†Ô∏è")
                            
                            #screen out current month if current month != 1
                            if current_month == 1 and selected_year == current_year: #‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1
                                st.warning('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 1 ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏∞‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏∞', icon="‚ÑπÔ∏è")

                                date_ls = sorted(pd.date_range(start = f'1/1/{selected_year}', end = current_time.strftime('%d/%m/%Y'), freq= 'D'))
                                st.write(date_ls)
                            else:
                                if selected_year == current_year: #‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 1 ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ ‡∏õ‡∏à‡∏ö
                                    st.info('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏∂‡∏á‡πÅ‡∏Ñ‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì', icon="‚ÑπÔ∏è")
                                    df = df[df['month'] != current_month].reset_index(drop = True)
                                    
                                    last_day_of_last_month = (current_time.replace(day = 1) - pd.Timedelta(days = 1)).strftime('%d/%m/%Y')
                                    date_ls = sorted(pd.date_range(start = f'1/1/{selected_year}', end = last_day_of_last_month, freq = 'D'))
                                else: #‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
                                    date_ls = sorted(pd.date_range(start = f'1/1/{selected_year}', end = f'31/12/{selected_year}', freq = 'D'))
                            
                            uncompleted_order_count = len(df[df['Order Status'] != 'Completed']['Order Status'].unique().tolist())
                            if uncompleted_order_count != 0:
                                st.warning(f"‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {store} ‡∏à‡∏≤‡∏Å TikTok ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏¢‡∏π‡πà {uncompleted_order_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ --> ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", icon="‚ö†Ô∏è")
                                ##########

                            df['Created Time'] = pd.to_datetime(df['Created Time'], format = '%d/%m/%Y %H:%M:%S\t').dt.date

                            tiktok_ls = []
                            for date in date_ls:
                                df1 = df[df['Created Time'] == date.date()]

                                if df1.shape[0] == 0:
                                    tiktok_ls.append([date.strftime('%Y-%m-%d'), None, None])
                                else:
                                    order_value = 0
                                    shipping_value = 0

                                    for order_id in df1['Order ID'].unique():
                                        df2 = df1[df1['Order ID'] == order_id].reset_index(drop = True)

                                        order_value += df2['SKU Subtotal Before Discount'].str.replace('THB ', '').str.replace(',', '').astype(float).sum() - float(df2['SKU Seller Discount'].str.replace('THB ', '').str.replace(',', '').astype(float).sum())
                                        shipping_value += float(df2.loc[0, 'Shipping Fee After Discount'].replace('THB ', '').replace(',', ''))
                                        
                                    tiktok_ls.append([date.strftime('%Y-%m-%d'), order_value, shipping_value])
                                
                            tiktok_result_df = pd.DataFrame(tiktok_ls, columns = ['date', 'order_value', 'shipping_value']).fillna(0)
                            tiktok_result_df = tiktok_result_df.set_index('date')
                            tiktok_result_df = tiktok_result_df[['order_value', 'shipping_value']]
                            tiktok_result_df.columns = pd.MultiIndex.from_arrays([[store+'_tiktok', store+'_tiktok'], tiktok_result_df.columns.tolist()])

                            total_sale += tiktok_result_df[store+'_tiktok']['order_value'].sum() + tiktok_result_df[store+'_tiktok']['shipping_value'].sum()

                            df_dict[store]['TikTok'] = tiktok_result_df

                
                st.divider()
                result_df = pd.DataFrame()
                for store_name, store_dict in df_dict.items():
                    for platform in ['Shopee', 'Lazada', 'TikTok']:
                        if platform in store_dict.keys():
                            df = store_dict[platform]
                            result_df = pd.concat([result_df, df], axis = 1)
                
                result_df['sum'] = result_df.sum(axis = 1)
                result_df['cumsum'] = result_df['sum'].cumsum()

                if result_df[result_df['cumsum'] >= 1800000].shape[0] > 0:
                    st.write(f'‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ({selected_year}) = {"{:,.2f}".format(result_df.iloc[result_df.shape[0] - 1, -1])} THB')
                    st.write(f'‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á 1.8 m ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {result_df[result_df["cumsum"] >= 1800000].index[0]}')
                    
                else:
                    st.write(f'‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏õ‡∏µ {selected_year} = {"{:.2f}".format(result_df.iloc[result_df.shape[0] - 1, -1])} THB --> ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏î vat')

                output = BytesIO()
                with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                    result_df.to_excel(writer, sheet_name='Sheet1')
                    # writer.save()
                processed_data = output.getvalue()


                col1, col2, col3 = st.columns(3)
                with col2:
                    st.download_button(
                        label = f"Download ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ {selected_year}",
                        data = processed_data,
                        file_name = f"‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°_{selected_year}.xlsx",
                        mime = "application/vnd.ms-excel",
                        key = "download_button" 
                    )

    else:
        st.error('‡∏Å‡∏£‡∏π‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà tab ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö', icon="üö®")

elif sidebar_radio == '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì VAT':
    
    st.write('')
    st.header(f'üëçVAT cal: {sidebar_radio}')
    st.divider()

    st.subheader('1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì VAT')
    selected_month = st.selectbox(
        label = 'select_month', 
        options = ([(pd.to_datetime('today').replace(day = 1) - pd.DateOffset(months = i)).strftime('%Y-%m') for i in range(1, 7)]), 
        index = 0, 
        label_visibility = 'collapsed'
    )
    month = pd.to_datetime(selected_month.split('-')[-1], format = '%m').month
    year = pd.to_datetime(selected_month.split('-')[0], format = '%Y').year

    if len([store_name for store_name in store_name_ls if store_name != '']) == store_number:
        st.divider()
        st.subheader('2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å platform ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà')
        # st.markdown(f'<h4>2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å platform ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà</h4>', unsafe_allow_html=True)
        tick_cols = st.columns(store_number)

        for i, store_name in enumerate(store_name_ls):
            with tick_cols[i]:
                st.markdown(f'<h5>&emsp;‚ú®‡∏£‡πâ‡∏≤‡∏ô {store_name}</h5>', unsafe_allow_html=True)
                for platform in ['Shopee', 'Lazada', 'TikTok']:
                    st.checkbox(label=f'{platform}', value = True, key = 'tick_' + store_name + '_' + platform)
    

        st.divider()
        st.subheader(f'3. upload files ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {month}-{year}')

        for store_order, store_name in enumerate(store_name_ls):
            st.markdown(f'<h4>üìç 3.{store_order + 1} ‡∏£‡πâ‡∏≤‡∏ô {store_name}</h4>', unsafe_allow_html=True)
            ###### part upload file ######
            platform_order = 0
            for platform in ['Shopee', 'Lazada', 'TikTok']:
                if st.session_state['tick_' + store_name + '_' + platform]: #if shopee of the store is ticked
                    platform_order += 1
                    if platform == 'Shopee': 
                        col1, col2 = st.columns([1, 1])
                        with col1:
                            st.markdown(f'<h5>&ensp;&ensp;üü† ‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ {platform}</h5>', unsafe_allow_html=True)
                            with st.expander("üî∏‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á Shopee ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô ?"):
                                st.write('''
                                    The chart above shows some numbers I picked for you.
                                    I rolled actual dice for these, so they're *guaranteed* to
                                    be random.
                                ''')

                            shopee_sale_file = st.file_uploader(
                                label = f'upload ‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (.xlsx)', 
                                accept_multiple_files = False,
                                type = 'xlsx', 
                                key = f'{store_name}_{platform}_sale_raw_file'
                            )


                            if shopee_sale_file != None:
                                st.success(f'‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', icon="‚úÖ")

                        with col2:
                            st.markdown(f'<h5>&ensp;&ensp;üü† ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° {platform}</h5>', unsafe_allow_html=True)
                            with st.expander("üî∏‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° Shopee ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô ?"):
                                st.write('''
                                    The chart above shows some numbers I picked for you.
                                    I rolled actual dice for these, so they're *guaranteed* to
                                    be random.
                                ''')

                            shopee_commission_file = st.file_uploader(
                                label = f'upload file ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° (.zip)', 
                                accept_multiple_files = False,
                                type = 'zip', 
                                key = f'{store_name}_{platform}_commission_raw_file'
                            )


                            if shopee_commission_file != None:
                                st.success(f'‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', icon="‚úÖ")
                        
                        

                    elif platform == 'Lazada':
                        col1, col2 = st.columns(2)
                        with col1:
                            st.markdown(f'<h5>&ensp;&ensp;üîµ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ {platform} </h5>', unsafe_allow_html=True)
                            with st.expander("üîπ‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á Lazada ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô ?"):
                                st.write('''
                                    The chart above shows some numbers I picked for you.
                                    I rolled actual dice for these, so they're *guaranteed* to
                                    be random.
                                ''')
                            
                            lazada_sale_file = st.file_uploader(
                                label = f'upload ‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (.xlsx)', 
                                accept_multiple_files = False, 
                                type = 'xlsx',
                                key = f'{store_name}_{platform}_sale_raw_file'
                                )
                            if lazada_sale_file != None:
                                st.success(f'‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', icon="‚úÖ")

                        with col2:
                            st.markdown(f'<h5>&ensp;&ensp;üîµ ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° {platform}</h5>', unsafe_allow_html=True)
                            with st.expander("üîπ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° Lazada ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô ?"):
                                st.write('''
                                    The chart above shows some numbers I picked for you.
                                    I rolled actual dice for these, so they're *guaranteed* to
                                    be random.
                                ''')

                            lazada_commission_files = st.file_uploader(
                                label = f'upload ‡πÑ‡∏ü‡∏•‡πå (.pdf) ‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢', 
                                accept_multiple_files = True, 
                                type = 'pdf',
                                key = f'{store_name}_{platform}_commission_raw_file'
                                )
                            if st.session_state[f'{store_name}_{platform}_commission_raw_file'] != []:
                                st.success(f'‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', icon="‚úÖ")

                    elif platform == 'TikTok':
                        col1, col2 = st.columns(2)

                        with col1:
                            st.markdown(f'<h5>&ensp;&ensp;‚ö´ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ {platform}</h5>', unsafe_allow_html=True)
                            with st.expander("‚ñ™Ô∏è‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á TikTok ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô ?"):
                                st.write('''
                                    The chart above shows some numbers I picked for you.
                                    I rolled actual dice for these, so they're *guaranteed* to
                                    be random.
                                ''')
                            tiktok_sale_file = st.file_uploader(
                                label = f'upload ‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (.csv)', 
                                accept_multiple_files = False, 
                                type = 'csv', 
                                key = f'{store_name}_{platform}_sale_raw_file'
                                )
                            if tiktok_sale_file != None:
                                st.success(f'‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', icon="‚úÖ")

                        with col2:
                            st.markdown(f'<h5>&ensp;&ensp;‚ö´ ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° {platform}</h5>', unsafe_allow_html=True)
                            with st.expander("‚ñ™Ô∏è‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° TikTok ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô ?"):
                                st.write('''
                                    The chart above shows some numbers I picked for you.
                                    I rolled actual dice for these, so they're *guaranteed* to
                                    be random.
                                ''')
                            tiktok_commission_file = st.file_uploader(
                            label = f'upload file ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° (.zip)', 
                            accept_multiple_files = False, 
                            type = 'zip', 
                            key = f'{store_name}_{platform}_commission_raw_file'
                            )
                            if tiktok_commission_file != None:
                                st.success(f'‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', icon="‚úÖ")
                    
                    st.write("")
                    st.write("")
                    
                else:
                    pass
            
            st.divider()
        
        #show ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        # check ‡∏ß‡πà‡∏≤ upload file ‡∏Ç‡∏≠‡∏á platform ‡∏¢‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡πâ‡∏Å‡∏°‡∏≤‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏∂‡∏¢‡∏±‡∏á
        tick_ls = [key  for key, value in st.session_state.items() if 'tick' in key and value == True]

        # st.write(st.session_state)
        check_d1 = {tick.replace('tick_', '')+'_commission_raw_file': st.session_state[tick.replace('tick_', '')+'_commission_raw_file'] for tick in tick_ls}
        check_d2 = {tick.replace('tick_', '')+'_sale_raw_file': st.session_state[tick.replace('tick_', '')+'_sale_raw_file'] for tick in tick_ls}
        # st.write(check_d1)
        # st.write(check_d2)
        check_d = {}

        for key,value in check_d1.items():
            check_d[key] = value
        for key,value in check_d2.items():
            check_d[key] = value

        if check_d == None:
            check_d = {"aa": None}

        # st.write(check_d)
        check_ls = list(dict.fromkeys(['aaa' if value is not None and value != [] else None for value in check_d.values()]))
        # st.write(check_ls)


        if 'aaa' not in check_ls: #None in check_d.values() or [] in check_d.values(): 
            st.write('please upload all files')
        else:
            if "calculate_clicked" not in st.session_state:
                st.session_state.calculate_clicked = False
            if "selected_names" not in st.session_state:
                st.session_state.selected_names = set()
            if 'sale_d' not in st.session_state:
                st.session_state['sale_d'] = {}
                # for store_name in store_name_ls:
                #     if store_name not in st.session_state['sale_d'].keys():
                #         st.session_state['sale_d'][store_name] = {}
            if 'commission_d' not in st.session_state:
                st.session_state['commission_d'] = {}
                # for store_name in store_name_ls:
                #     if store_name not in st.session_state['commission_d'].keys():
                #         st.session_state['commission_d'][store_name] = {}

            cal_col1, cal_col2, cal_col3 = st.columns([2, 1, 2])
            with cal_col2:
                if st.button('calculate', use_container_width = True):
                    st.session_state.calculate_clicked = True
                    st.session_state.selected_names = set()

            if st.session_state.calculate_clicked:
                # st.session_state['sale_d'] = {}
                # st.session_state['commission_d'] = {}

                # st.write(st.session_state.keys())
                
                for key, value in st.session_state.items(): #value = uploaded file
                    ############## sale ##############
                    if value != None:
                        if '_sale_raw_file' in key and 'Shopee' in key:
                            store = key.split('_')[0]
                            if store not in st.session_state['sale_d'].keys():
                                st.session_state['sale_d'][store] = {}

                            df = pd.read_excel(value, converters={'‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠':str})
                            # df = df[~df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'].isin(['‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß'])].drop_duplicates()

                            # df['year'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'], format = '%Y-%m-%d %H:%M').dt.year #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ ‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏´‡∏°
                            # df['month'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'], format = '%Y-%m-%d %H:%M').dt.month #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

                            # #check ‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                            # if df[df['year'].astype(int) != int(year)].shape[0] != 0 and df[df['year'].astype(int) == int(year)].shape[0] == 0: 
                            #     st.error(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å Shopee: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {month}/{year} ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ' + '--> ‡∏≠‡∏≤‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏¥‡∏î', icon="üö®")
                            #     break
                            # else:
                            #     if df[(df['year'].astype(int) != int(year)) & (df['month'].astype(int) != int(month))].shape[0] != 0:
                            #         st.warning(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å Shopee: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {month}/{year} ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡∏¥‡∏î‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢' + '--> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', icon="‚ö†Ô∏è")

                            #     #screen out year
                            #     df = df[(df['year'] == int(year)) & (df['month'] == month)].reset_index(drop = True)

                            #     uncompleted_order_count = len(df[df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'] != '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß']['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'].unique().tolist())
                            #     if uncompleted_order_count != 0:
                            #         st.warning(f"‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {store} (Shopee) ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏¢‡∏π‡πà {uncompleted_order_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ --> ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", icon="‚ö†Ô∏è")

                            #     df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'], format = '%Y-%m-%d %H:%M').dt.date
                            #     # shopee_sale_df['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'] = shopee_sale_df['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'].astype(str)
                            #     df = df[['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠)', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏™‡∏∏‡∏ó‡∏ò‡∏¥', '‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢', 
                            #                                     '‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠', '‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà Shopee ‡∏≠‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì', '‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏ô', '‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì']]

                            #     sale_ls = []
                            #     for order_id in df['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'].unique():
                            #         df1 = df[df['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'] == order_id].reset_index(drop = True)
                            #         order_date = df1.loc[0, '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠']
                            #         order_no = df1.loc[0, '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠']
                            #         customer_name = df1.loc[0, '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠)']
                            #         seller_discount_code = float(df1.loc[0, '‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢'])
                            #         include_vat = df1['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏™‡∏∏‡∏ó‡∏ò‡∏¥'].sum() - seller_discount_code
                            #         vat = round((include_vat * 0.07) / 1.07, 2)
                            #         before_vat = include_vat - vat
                            #         status = df1.loc[0, '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠']

                            #         sale_ls.append(['Shopee', store_name, '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', order_date, status, order_no, customer_name, before_vat, vat, include_vat])

                            #         shipping_fee_from_buyer = df1.loc[0, '‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠']
                            #         if float(shipping_fee_from_buyer) != 0:
                            #             shipping_vat = round((shipping_fee_from_buyer * 0.07) / 1.07, 2)
                            #             shipping_before_vat = shipping_fee_from_buyer - shipping_vat
                            #             sale_ls.append(['Shopee', store_name, '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', order_date, status, order_no, customer_name, shipping_before_vat, shipping_vat, shipping_fee_from_buyer])

                            #     shopee_sale_df_result = pd.DataFrame(sale_ls, columns = ['platform', 'store_name', 'type', 'order_date', 'status', 'order_no', 'customer_name', 'before_vat', 'vat', 'include_vat'])
                            #     shopee_sale_df_result = shopee_sale_df_result[['platform', 'store_name', 'type', 'order_date', 'status', 'order_no', 'customer_name', 'before_vat', 'vat', 'include_vat']]


                                # st.session_state['sale_d'][store]['Shopee'] = shopee_sale_df_result
                            st.session_state['sale_d'][store]['Shopee'] = vat_cal_sale_shopee(store, df)

                        elif '_sale_raw_file' in key and 'Lazada' in key:
                            store = key.split('_')[0]
                            if store not in st.session_state['sale_d'].keys():
                                st.session_state['sale_d'][store] = {}

                            df = pd.read_excel(value, converters={'orderNumber':str})
                            # df = df[~df['status'].isin(['canceled', 'returned', 'Package Returned'])].drop_duplicates().reset_index(drop = True)

                            # df['year'] = pd.to_datetime(df['createTime'], format = '%d %b %Y %H:%M').dt.year #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ ‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏´‡∏°
                            # df['month'] = pd.to_datetime(df['createTime'], format = '%d %b %Y %H:%M').dt.month #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

                            # #check ‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                            # if df[df['year'].astype(int) != int(year)].shape[0] != 0 and df[df['year'].astype(int) == int(year)].shape[0] == 0: 
                            #     st.error(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å Lazada: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏µ {year} / ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ' + ', '.join(df['year'].astype(str).unique().tolist()) + '--> ‡∏≠‡∏≤‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏¥‡∏î', icon="üö®")
                            #     break
                            # else:
                            #     if df[(df['year'].astype(int) != int(year)) & (df['month'].astype(int) != int(month))].shape[0] != 0:
                            #         st.warning(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å Lazada: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {month}/{year} ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡∏¥‡∏î‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢' + '--> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', icon="‚ö†Ô∏è")

                            #     #screen out year
                            #     df = df[(df['year'] == int(year)) & (df['month'] == month)].reset_index(drop = True)

                            #     uncompleted_order_count = len(df[df['status'] != 'confirmed']['status'].unique().tolist())
                            #     if uncompleted_order_count != 0:
                            #         st.warning(f"‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {store} (Lazada) ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏¢‡∏π‡πà {uncompleted_order_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ --> ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", icon="‚ö†Ô∏è")
                            #         st.dataframe(df[df['status'] != 'confirmed'])
                            #     ##################################################################################################

                            # df['createTime'] = pd.to_datetime(df['createTime'], format = '%d %b %Y %H:%M').dt.date
                            # df = df[['status', 'createTime', 'orderNumber', 'customerName', 'paidPrice', 'sellerDiscountTotal']]

                            # sale_ls = []
                            # for order_id in df['orderNumber'].unique():
                            #     df1 = df[df['orderNumber'] == order_id].reset_index(drop = True)

                            #     order_date = df1.loc[0, 'createTime']
                            #     order_no = str(df1.loc[0, 'orderNumber'])
                            #     customer_name = df1.loc[0, 'customerName']
                            #     include_vat = df1['paidPrice'].sum()
                            #     vat = round((include_vat * 0.07) / 1.07, 2)
                            #     before_vat = include_vat - vat

                            #     status = df1.loc[0, 'status']

                            #     sale_ls.append(['Lazada', store_name, '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', order_date, status, order_no, customer_name, before_vat, vat, include_vat])

                            # lazada_sale_df_result = pd.DataFrame(sale_ls, columns = ['platform', 'store_name', 'type', 'order_date', 'status', 'order_no', 'customer_name', 'before_vat', 'vat', 'include_vat'])
                            # lazada_sale_df_result = lazada_sale_df_result[['platform', 'store_name', 'type', 'order_date', 'status', 'order_no', 'customer_name', 'before_vat', 'vat', 'include_vat']]

                            st.session_state['sale_d'][store]['Lazada'] = vat_cal_sale_lazada(store, df)

                        elif '_sale_raw_file' in key and 'TikTok' in key:
                            store = key.split('_')[0]
                            if store not in st.session_state['sale_d'].keys():
                                st.session_state['sale_d'][store] = {}

                            df = pd.read_csv(value, converters={'Order ID':str})

                            df = df[~df['Order Status'].isin(['Canceled'])]
                            df = df[df['Order Status'] != 'Canceled'].drop_duplicates().reset_index(drop = True)

                            df['year'] = pd.to_datetime(df['Created Time'], format = '%d/%m/%Y %H:%M:%S\t').dt.year #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ ‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏´‡∏°
                            df['month'] = pd.to_datetime(df['Created Time'], format = '%d/%m/%Y %H:%M:%S\t').dt.month #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

                            #check ‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                            if df[df['year'].astype(int) != int(year)].shape[0] != 0 and df[df['year'].astype(int) == int(year)].shape[0] == 0: 
                                st.error(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} | TikTok: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏µ {year} / ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ' + ', '.join(df['year'].astype(str).unique().tolist()) + '--> ‡∏≠‡∏≤‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏¥‡∏î', icon="üö®")
                                break
                            else:
                                if df[(df['year'].astype(int) != int(year)) & (df['month'].astype(int) != int(month))].shape[0] != 0:
                                    st.warning(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} | TikTok: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {month}/{year} ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡∏¥‡∏î‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢' + '--> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', icon="‚ö†Ô∏è")

                                #screen out year
                                df = df[(df['year'] == int(year)) & (df['month'] == month)].reset_index(drop = True)

                                uncompleted_order_count = len(df[df['Order Status'] != 'Completed']['Order Status'].unique().tolist())
                                if uncompleted_order_count != 0:
                                    st.warning(f"‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {store} (TikTok) ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏¢‡∏π‡πà {uncompleted_order_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ --> ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", icon="‚ö†Ô∏è")
                                    ##########


                            df['SKU Subtotal Before Discount'] = df['SKU Subtotal Before Discount'].str.replace('THB ', '').str.replace(',', '').astype(float)
                            df['SKU Seller Discount'] = df['SKU Seller Discount'].str.replace('THB ', '').str.replace(',', '').astype(float)
                            df['Shipping Fee After Discount'] = df['Shipping Fee After Discount'].str.replace('THB ', '').str.replace(',', '').astype(float)
                            df = df[['Order Status', 'Created Time', 'Order ID', 'Buyer Username', 'SKU Subtotal Before Discount', 'SKU Seller Discount',
                                                            'Shipping Fee After Discount']]

                            sale_ls = []
                            for order_id in df['Order ID'].unique():
                                df1 = df[df['Order ID'] == order_id].reset_index(drop = True)

                                order_date = df1.loc[0, 'Created Time']
                                order_no = str(df1.loc[0, 'Order ID']).replace('\t', '')
                                customer_name = df1.loc[0, 'Buyer Username']
                                seller_discount_code = float(df1['SKU Seller Discount'].sum())
                                include_vat = df1['SKU Subtotal Before Discount'].sum() - seller_discount_code
                                vat = round((include_vat * 0.07) / 1.07, 2)
                                before_vat = include_vat - vat

                                status = df1.loc[0, 'Order Status']

                                sale_ls.append(['TikTok', store_name, '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', order_date, status, order_no, customer_name, before_vat, vat, include_vat])


                                shipping_fee_from_buyer = df1.loc[0, 'Shipping Fee After Discount']

                                if float(shipping_fee_from_buyer) != 0:
                                    shipping_vat = round((shipping_fee_from_buyer * 0.07) / 1.07, 2)
                                    shipping_before_vat = shipping_fee_from_buyer - shipping_vat
                                    sale_ls.append(['TikTok', store_name, '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', order_date, status, order_no, customer_name, shipping_before_vat, shipping_vat, shipping_fee_from_buyer])


                            tiktok_sale_df_result = pd.DataFrame(sale_ls, columns = ['platform', 'store_name', 'type', 'order_date', 'status', 'order_no', 'customer_name', 'before_vat', 'vat', 'include_vat'])
                            tiktok_sale_df_result = tiktok_sale_df_result[['platform', 'store_name', 'type', 'order_date', 'status', 'order_no', 'customer_name', 'before_vat', 'vat', 'include_vat']]

                            st.session_state['sale_d'][store]['TikTok'] = tiktok_sale_df_result


                        ############## sale ##############
                        if '_commission_raw_file' in key and 'Shopee' in key:
                            # ls = []
                            # pdf_ls = []
                            store = key.split('_')[0]

                            if store not in st.session_state['commission_d'].keys():
                                st.session_state['commission_d'][store] = {}

                            # with zipfile.ZipFile(value, 'r') as z:
                            #     sorted_file_ls = ['-'.join(ls) for ls in sorted([n.split('-') for n in z.namelist() if 'SPX' not in n], key = lambda x: int(x[4]))]
                            #     progress_bar = st.progress(0, text = 'processing shopee commission pdf')
                                
                            #     for i, file_name in enumerate(sorted_file_ls):
                            #         if 'SPX' in file_name:
                            #             progress_bar.progress((i + 1) / len(sorted_file_ls), text='reading shopee commission pdf files')
                            #         else:
                            #             pdf_file = pypdf.PdfReader(BytesIO(z.read(file_name)))

                            #             doc_date, doc_num, issued_company, before_vat, vat, company_name, company_tax_id = None, None, None, None, None, None, None
                            #             # st.write(pdf_file.pages[0].extract_text().split('\n'))
                            #             # break
                            #             for j, text in enumerate(pdf_file.pages[0].extract_text().split('\n')):
                            #                 if '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' in text and '‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' not in text:
                            #                     doc_date = pd.to_datetime(text.split(' ')[-1], format = '%d/%m/%Y').date()
                            #                 elif 'Co.,' in text:
                            #                     issued_company = text
                            #                 elif '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà' in text:
                            #                     # st.write(text)
                            #                     doc_num = text.split('No. ')[-1] + ' ' + pdf_file.pages[0].extract_text().split('\n')[j + 1]
                            #                 elif '‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ' in text:
                            #                     company_tax_id = text.split('Tax ID ')[-1].split('‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà/')[0]
                            #                 elif 'after discount' in text:
                            #                     before_vat = round(float(text.split(' ')[-1].replace(',', '')), 2)
                            #                 elif 'VAT' in text and '7%' in text:
                            #                     vat = round(float(text.split(' ')[-1].replace(',', '')), 2)
                            #                 elif 'Customer name' in text:
                            #                     company_name = text.split('Customer name ')[-1]
                                                        
                            #         if None in [doc_date, company_name, company_tax_id, issued_company, doc_num, before_vat, vat]:
                            #             st.error(f'something wrong with {store} Shopee commission file: {file_name}', icon="üö®")
                            #             break
                            #         else:
                            #             ls.append([doc_date, company_name, company_tax_id, issued_company, doc_num, before_vat, vat])
                            #             pdf_ls.append([company_name, 'Shopee', company_tax_id, doc_date, BytesIO(z.read(file_name))])
                            #             progress_bar.progress((i + 1) / len(sorted_file_ls), text = f'reading {store} Shopee commission files')

                            # st.session_state['commission_d'][store]['Shopee'] = {
                            #     'commission_df': pd.DataFrame(ls, columns = ['doc_date', 'company_name', 'company_tax_id', 'issue_comapny', 'doc_num', 'before_vat', 'vat']), 
                            #     'pdf_df': pd.DataFrame(pdf_ls, columns = ['company_name', 'platform', 'company_tax_id', 'doc_date', 'pdf_file'])
                            # }
                            st.session_state['commission_d'][store]['Shopee'] = vat_cal_commission_shopee(store, value)
                            # progress_bar.empty()


                        elif '_commission_raw_file' in key and 'Lazada' in key:
                            # ls = []
                            # pdf_ls = []
                            store = key.split('_')[0]
                            # doc_num_ls = []

                            if store not in st.session_state['commission_d'].keys():
                                st.session_state['commission_d'][store] = {}

                            # progress_bar = st.progress(0, text = 'processing Lazada commission pdf')
                            # for file_order, file_name in enumerate(lazada_commission_files):
                            #     pdf_file = pypdf.PdfReader(file_name)


                            #     if 'Lazada Express Limited' in pdf_file.pages[0].extract_text() or 'Shipping Fee' in pdf_file.pages[0].extract_text():
                            #         progress_bar.progress((i + 1) / len(lazada_commission_files), text = 'reading Lazada commission pdf files')
                            #     # elif doc_num in doc_num_ls: #‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô ‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ã‡πâ‡∏≥ ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡∏ã‡πâ‡∏≥
                            #     #     progress_bar.progress((file_order + 1) / len(lazada_commission_files), text = 'reading Lazada commission pdf files')
                            #     else: 
                            #         doc_date, doc_num, issued_company, before_vat, vat, company_name, company_tax_id = None, None, None, None, None, None, None

                            #         #‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ 'TAX INVOICE / RECEIPT'
                            #         if 'TAX INVOICE / RECEIPT' in pdf_file.pages[0].extract_text():
                            #             # st.write(pdf_file.pages[0].extract_text().split('\n'))
                            #             for j, text in enumerate(pdf_file.pages[0].extract_text().split('\n')):
                            #                 if 'Invoice Date' in text:
                            #                     doc_date = pd.to_datetime(text.split(': ')[-1], format = '%Y-%m-%d').date()
                            #                 elif 'Lazada' in text:
                            #                     issued_company = text
                            #                 elif 'Total' in text and '(Including Tax)' not in text:
                            #                     before_vat = float(text.split(' ')[-1].replace(',', ''))
                            #                 elif '7% (VAT)' in text:
                            #                     vat = float(text.split(') ')[-1].replace(',', ''))
                            #                 elif 'Invoice No.:' in text:
                            #                     doc_num = text.split(' ')[-1]
                            #                 elif 'TAX INVOICE / RECEIPT' in text:
                            #                     company_name = pdf_file.pages[0].extract_text().split('\n')[j + 2]
                            #                     company_tax_id = pdf_file.pages[0].extract_text().split('\n')[j + 7].split('Tax ID: ')[-1].split('Invoice')[0]

                            #                 # break
                                    
                            #         #‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô --> ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏Ñ‡∏∑‡∏≠ ‡πÉ‡∏ö‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
                            #         elif 'CREDIT NOTE' in pdf_file.pages[0].extract_text() and 'Reversal Commission' in pdf_file.pages[0].extract_text():
                            #             # st.write(pdf_file.pages[0].extract_text().split('\n'))
                            #             for j, text in enumerate(pdf_file.pages[0].extract_text().split('\n')):
                            #                 if 'Date: ' in text:
                            #                     doc_date = pd.to_datetime(text.split(': ')[-1], format = '%Y-%m-%d').date()
                            #                 elif 'Lazada' in text:
                            #                     issued_company = text
                            #                 elif 'Total' in text and '(Including Tax)' not in text:
                            #                     before_vat = float(text.split(' ')[-1].replace(',', '')) * -1
                            #                 elif '7% (VAT)' in text:
                            #                     vat = float(text.split(') ')[-1].replace(',', '')) * -1
                            #                 elif 'CREDIT NOTE' in text:
                            #                     company_name = pdf_file.pages[0].extract_text().split('\n')[j + 2].replace('  ', ' ')
                            #                     company_tax_id = pdf_file.pages[0].extract_text().split('\n')[j + 7].split('Tax ID: ')[-1]
                            #                 elif 'Credit Note: ' in text:
                            #                     doc_num = text.split('Credit Note: ')[-1]
                                            

                            #         if None in [doc_date, company_name, company_tax_id, issued_company, doc_num, before_vat, vat]:
                            #             st.error(f'something wrong with {store} Lazada commission file: {file_name}', icon="üö®")
                            #             # st.write([doc_date, company_name, company_tax_id, issued_company, doc_num, before_vat, vat])
                            #             break
                            #         else:
                            #             ls.append([doc_date, company_name, company_tax_id, issued_company, doc_num, before_vat, vat])
                            #             pdf_ls.append([company_name, 'Lazada', company_tax_id, doc_date, file_name])
                            #             doc_num_ls.append(doc_num) #‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡∏Å‡∏±‡∏ô ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ñ‡∏ô‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏ã‡πâ‡∏≥
                            #             progress_bar.progress((i + 1) / len(lazada_commission_files), text = f'reading {store} Shopee commission files')

                            st.session_state['commission_d'][store]['Lazada'] = vat_cal_commission_lazada(store, value)

                            

                        elif '_commission_raw_file' in key and 'TikTok' in key:
                            # ls = []
                            # pdf_ls = []
                            store = key.split('_')[0]

                            if store not in st.session_state['commission_d'].keys():
                                st.session_state['commission_d'][store] = {}

                            # progress_bar = st.progress(0, text = 'processing TikTok commission pdf')
                            # with zipfile.ZipFile(value,'r') as z:
                            #     sorted_file_ls = sorted([n for n in z.namelist() if 'THJV' not in n and 'TTSTHAC' not in n])
                            #     progress_bar = st.progress(0, text = 'processing tiktok commission pdf')

                            #     for i, file_name in enumerate(sorted_file_ls):
                            #         if 'THJV' in file_name or 'TTSTHAC' in file_name:
                            #             progress_bar.progress((i + 1) / len(sorted_file_ls), text='reading tiktok commission pdf files')
                            #         else:
                            #             # pdf_file = pypdf.PdfReader(BytesIO(z.read(file_name)))
                            #             pdf_file = pypdf.PdfReader(BytesIO(z.read(file_name)))
                            #             doc_date, doc_num, issued_company, before_vat, vat, company_name, company_tax_id = None, None, None, None, None, None, None
                            #             for j, text in enumerate(pdf_file.pages[0].extract_text().split('\n')):
                            #                 if 'Invoice date' in text:
                            #                     doc_date = pd.to_datetime(text.split(' : ')[-1], format = '%b %d, %Y').date()
                            #                 elif 'Ltd.' in text and 'prepared by' not in text and 'For corporate' not in text:
                            #                     issued_company = text
                            #                 elif 'Invoice number : ' in text:
                            #                     doc_num = text.split('Invoice number : ')[-1]
                            #                 elif 'Subtotal (excluding VAT)' in text:
                            #                     before_vat = float(text.split(' ')[-1].replace(',', '').replace('‡∏ø', ''))
                            #                 elif 'Total VAT' in text and '7%' in text:
                            #                     vat = float(text.split(' ')[-1].replace(',', '').replace('‡∏ø', '')) 
                            #                 elif 'Client Name' in text:
                            #                     company_name = text.split('Client Name: ')[-1]
                            #                 elif 'Tax ID:' in text:
                            #                     company_tax_id = text.split(': ')[-1]

                            #             if None in [doc_date, company_name, company_tax_id, issued_company, doc_num, before_vat, vat]:
                            #                 st.error(f'something wrong with {store} TikTok commission file: {file_name}', icon="üö®")
                            #                 break
                            #             else:
                            #                 ls.append([doc_date, company_name, company_tax_id, issued_company, doc_num, before_vat, vat])
                            #                 pdf_ls.append([company_name, 'TikTok', company_tax_id, doc_date, BytesIO(z.read(file_name))])
                            #                 progress_bar.progress((i + 1) / len(sorted_file_ls), text = f'reading {store} Shopee commission files')
                            st.session_state['commission_d'][store]['TikTok'] = vat_cal_commission_tiktok(store, value)
                                # st.dataframe(pd.DataFrame(ls, columns = ['doc_date', 'company_name', 'company_tax_id', 'issue_comapny', 'doc_num', 'before_vat', 'vat']))
                                # progress_bar.empty()

                ############## merge data ##############  
                unupload_sale_ls = []
                unupload_commission_ls = []
                for key in {key: value for key, value in st.session_state.items() if 'tick' in key and value == True}.keys():
                    store = key.split('_')[1]
                    platform = key.split('_')[-1]
                    # st.write(store, platform)
                    if st.session_state[f'{store}_{platform}_sale_raw_file'] == None or st.session_state[f'{store}_{platform}_sale_raw_file'] == []:
                        # st.write(st.session_state['sale_d'][store][platform])
                        # if st.session_state['sale_d'][store][platform].empty:
                        unupload_sale_ls.append(f'{store} {platform}')
                        # st.write('aaa')
                    if st.session_state[f'{store}_{platform}_commission_raw_file'] == None or st.session_state[f'{store}_{platform}_commission_raw_file'] == []:
                        if st.session_state['commission_d'][store][platform]['commission_df'].empty:
                            unupload_commission_ls.append(f'{store} {platform}')
                            # st.write('bbb')

                if unupload_sale_ls != []:
                    st.warning(f'‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {", ".join(unupload_sale_ls)} --> ‡∏Å‡∏£‡∏π‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', icon="‚ö†Ô∏è")
                    st.write(unupload_sale_ls)
                if unupload_commission_ls != []:
                    st.warning(f'‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {", ".join(unupload_commission_ls)} --> ‡∏Å‡∏£‡∏π‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', icon="‚ö†Ô∏è")

                # st.write(st.session_state)
                sale_df = pd.DataFrame()
                # st.write(st.session_state)
                for store in store_name_ls:
                    # st.write(store)
                    for platform in ['Shopee', 'Lazada', 'TikTok']:
                        if store in st.session_state['sale_d'].keys():
                            if platform in st.session_state['sale_d'][store].keys() and st.session_state[f'tick_{store}_{platform}']:
                                sale_df = pd.concat([sale_df, st.session_state['sale_d'][store][platform]])

                # st.dataframe(sale_df)

                commission_df = pd.DataFrame()
                pdf_df = pd.DataFrame()
                for store in store_name_ls:
                    for platform in ['Shopee', 'Lazada', 'TikTok']:
                        if platform in st.session_state['commission_d'][store].keys() and st.session_state[f'tick_{store}_{platform}']:
                            # st.write(st.session_state['commission_d'][store][platform]['commission_df'])
                            commission_df = pd.concat([commission_df, st.session_state['commission_d'][store][platform]['commission_df']], axis = 0).reset_index(drop = True)
                            pdf_df = pd.concat([pdf_df, st.session_state['commission_d'][store][platform]['pdf_df']], axis = 0).reset_index(drop = True)


                #split df
                # st.dataframe(commission_df)
                if len(commission_df['company_tax_id'].str.lower().str.replace(' ', '').unique()) >= 2:
                    st.subheader('5. check')
                    st.warning('‡πÄ‡∏à‡∏≠‡∏ä‡∏∑‡πà‡∏≠ ‡∏ö ‡πÉ‡∏ô‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ä‡∏∑‡πà‡∏≠ --> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡πà‡∏≤‡∏¢ VAT ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', icon="‚ö†Ô∏è")

                    unique_company_tax_id = commission_df['company_tax_id'].str.replace(' ', '').unique().tolist()

                    # st.write(unique_company_tax_id)
                    for tax_id in unique_company_tax_id:
                        # Create a section for each unique name
                        name = commission_df[commission_df['company_tax_id'] == tax_id]['company_name'].tolist()[0]
                        checkbox_key = f"checkbox_{tax_id}"
                        is_checked = st.checkbox(name, key = checkbox_key)

                        # Update the set of selected names based on the checkbox state
                        if is_checked:
                            st.session_state.selected_names.add(tax_id)
                        else:
                            st.session_state.selected_names.discard(tax_id)

                        # Show filtered dataframe for the name
                        # st.write(st.session_state.selected_names)
                        filtered_commission_df = commission_df[commission_df["company_tax_id"] == tax_id]
                        filtered_pdf_df = pdf_df[pdf_df['company_tax_id']== tax_id]
                        # st.dataframe(filtered_pdf_df)
                        st.dataframe(filtered_commission_df)
                    

                    
                    # if 'tick_done' not in st.session_state:
                    #     st.session_state['tick_done'] = False



                    # st.dataframe(commission_df)
                    # for i, tax_id in enumerate(commission_df['company_tax_id'].str.replace(' ', '').unique().tolist()):
                    #     tax_id = commission_df[commission_df['company_tax_id'].str.replace(' ', '') == name]['tax_id'].tolist()[0]
                    #     if f'tick_{tax_id}' not in st.session_state:
                    #         st.session_state[f'tick_{tax_id}'] = commission_df[commission_df['company_tax_id'].str.replace(' ', '') == tax_id]
                    #         st.session_state['']

                        # name = commission_df[commission_df['company_tax_id'].str.replace(' ', '') == tax_id].reset_index(drop = True).loc[0, 'company_name']
                        # if f'tax_id_{tax_id}' not in st.session_state:
                        #     st.checkbox(label=f'{name}', key = f'tick_{tax_id}')
                        #     # st.write(st.session_state)
                        #     st.dataframe(commission_df[commission_df['company_tax_id'] == tax_id])
                        # else:
                        #     st.dataframe(commission_df[commission_df['company_tax_id'] == tax_id])

                    # commission_df1 = pd.DataFrame()
                    # st.write([key for key in st.session_state.keys() if 'tax_id' in key])
                    # for i, tax_id in enumerate([key for key in st.session_state.keys() if 'tax_id' in key]):
                    #     if st.session_state[tax_id]:
                            
                    #         # commission_df1 = pd.concat([commission_df1, ], axis = 0).reset_index(drop = True)
                    #         st.session_state[tax_id] = commission_df[commission_df['company_tax_id'] == tax_id.replace('tax_id_', '')]
                    #         st.dataframe(commission_df[commission_df['company_tax_id'] == tax_id.replace('tax_id_', '')])
                    # commission_df = commission_df1

                    finish_tick_col1, finish_tick_col2, finish_tick_col3 = st.columns([2, 1, 2])
                    with finish_tick_col2:
                        if st.button('finish ticking', use_container_width=True):
                            ready_to_download = True
                            commission_df1 = pd.concat(
                                                [commission_df[commission_df["company_tax_id"] == name].sort_values(by = ['doc_date', 'doc_num'], ascending = [True, True]) for name in st.session_state.selected_names]
                                            )
                            pdf_df1 = pd.concat(
                                                [pdf_df[pdf_df["company_tax_id"] == name] for name in st.session_state.selected_names]
                                            )
                            st.divider()
                        else:
                            ready_to_download = False


                else:
                    ready_to_download = True
                    commission_df1 = commission_df.sort_values(by = ['doc_date', 'doc_num'], ascending = [True, True]).reset_index(drop=True)
                    pdf_df1 = pdf_df
                    st.divider()

                # st.dataframe(sale_df)
                if ready_to_download:
                    # st.dataframe(sale_df)
                    st.write(f'‡∏†‡∏≤‡∏©‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏≤‡∏¢ = {"{:,.2f}".format(sale_df["vat"].sum())}')
                    # st.dataframe(commission_df1)
                    st.write(f'‡∏†‡∏≤‡∏©‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ã‡∏∑‡πâ‡∏≠ = {"{:,.2f}".format(commission_df1["vat"].sum())}')
                    # st.write('total vat')
                    st.write(f'‡∏†‡∏≤‡∏©‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏£‡∏£‡∏û‡∏≤‡∏Å‡∏£ = {"{:,.2f}".format(sale_df["vat"].sum() - commission_df1["vat"].sum())}')

                    # st.write(st.session_state)

                    # st.dataframe(pdf_df1[[c for c in pdf_df1.columns if c != 'pdf_file']])
                    
                    merged_pdf_d = {}
                    for store in pdf_df1['store_name'].unique():
                        df1 = pdf_df1[pdf_df1['store_name'] == store].reset_index(drop = True)
                        for platform in df1['platform'].unique():
                            df2 = df1[df1['platform'] == platform].reset_index(drop = True)

                            
                            merger = PdfMerger()
                            for pdf in pdf_df1.sort_values(by = 'doc_date', ascending = True)['pdf_file']:
                        # for platform, d2 in d1.items():
                        #     pdf_df = d2['pdf_df'].sort_values(by = 'doc_date', ascending = True).reset_index(drop = True)
                        # st.dataframe(pdf_df)

                        # for f in pdf_df['pdf_file'].tolist():
                                merger.append(pdf)

                            merged_pdf = BytesIO()
                            merger.write(merged_pdf)
                            merger.close()

                            merged_pdf.seek(0)

                            merged_pdf_d[f'{store}_{platform}_commission_receipt'] = merged_pdf
                        
                    buffer = BytesIO()
                    with zipfile.ZipFile(buffer, "w", zipfile.ZIP_DEFLATED) as zipf:
                        
                        for i, df in enumerate([sale_df, commission_df1]):
                            excel_buffer = BytesIO()
                            with pd.ExcelWriter(excel_buffer, engine='xlsxwriter') as writer:
                                df.to_excel(writer, index=False, sheet_name="Sheet1")
                            excel_buffer.seek(0)

                            zipf.writestr(f'‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡∏Ç‡∏≤‡∏¢_{month}{year}.xlsx' if i == 0 else f'‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡∏ã‡∏∑‡πâ‡∏≠_{month}{year}.xlsx', excel_buffer.getvalue())

                        for key, value in merged_pdf_d.items():
                            zipf.writestr(f"{key}.pdf", value.read())

                    download_col1, download_col2, doanload_col3 = st.columns([2, 1, 2])
                    with download_col2:
                        st.download_button(
                                    label = "download final file",
                                    data = buffer,
                                    file_name = f"‡∏¢‡∏≠‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏∑‡πà‡∏ôvat_{month}{year}.zip",
                                    mime = "application/zip",
                                    key="download_vat_button", 
                                    use_container_width=True
                            )
                            

    else:
        st.write('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà tab ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢')
    
elif sidebar_radio == '‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ':
    pass

# %%
