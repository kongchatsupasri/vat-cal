#%%
import streamlit as st
import pandas as pd
import time
import datetime
import xlsxwriter
from io import BytesIO
from PyPDF2 import PdfMerger
import zipfile
import pypdf
from PIL import Image
import json
import time
import smtplib
import mimetypes
import io
from email.message import EmailMessage
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from pprint import pprint
from email.utils import formataddr
import mimetypes
#%% function for page "‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏î VAT ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á"
@st.cache_data(show_spinner = False)
def total_sale_shopee(shopee_file_ls, selected_year, store, is_full_year, current_month):
    #shopee uploaded files are in list
    df = pd.concat([pd.read_excel(f, converters = {'‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠': str}) for f in shopee_file_ls], axis = 0)
    
    if all(col in list(df.columns) for col in ['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏™‡∏∏‡∏ó‡∏ò‡∏¥', '‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢', '‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠']):
        df = df[~df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'].isin(['‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß'])].drop_duplicates()
        df['year'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'], format = '%Y-%m-%d %H:%M').dt.year #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ ‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏´‡∏°
        df['month'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'], format = '%Y-%m-%d %H:%M').dt.month #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

        #check ‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
        if df[df['year'].astype(int) != int(selected_year)].shape[0] != 0 and df[df['year'].astype(int) == int(selected_year)].shape[0] == 0: 
            st.error(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å Shopee: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏µ {selected_year} / ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ' + ', '.join(df['year'].astype(str).unique().tolist()) + '--> ‡∏≠‡∏≤‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏¥‡∏î', icon="üö®")
            return None
        else:
            if df[df['year'].astype(int) != int(selected_year)].shape[0] != 0:
                st.warning(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å Shopee ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ ' + ', '.join([y for y in df['year'].astype(str).unique().tolist() if y != selected_year]) +'‡∏ï‡∏¥‡∏î‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢' + '--> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', icon="‚ö†Ô∏è")
            
            #screen out year
            df = df[df['year'] == int(selected_year)]

            #check ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            ##################################################################################################
            # missing_month_ls = [m for m in [i for i in range(1, 13 if is_full_year else current_month + 1)] if m not in sorted(df['month'].unique().tolist())]

            if is_full_year: #get month_ls
                month_ls = [i for i in range(1, 13)]
            else: #not full year
                if current_month == 1:
                    month_ls = [1]
                else:
                    month_ls = [m for m in range(1, current_month)]
            missing_month_ls = [str(m) for m in month_ls if m not in df['month'].unique().tolist()]

            #‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
            if missing_month_ls != []:
                st.warning(f'‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà: ‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {store} ‡∏à‡∏≤‡∏Å Shopee ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà {",".join(missing_month_ls)}', icon="‚ö†Ô∏è")
            
            #screen out current month if current month != 1
            if current_month == 1 and selected_year == current_year: #‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1
                st.warning('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 1 ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏∞‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', icon="‚ÑπÔ∏è")

                date_ls = sorted(pd.date_range(start = f'1/1/{selected_year}', end = current_time.strftime('%d/%m/%Y'), freq= 'D'))
            else:
                if selected_year == current_year: #‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 1 ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ ‡∏õ‡∏à‡∏ö
                    st.info('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏∂‡∏á‡πÅ‡∏Ñ‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì', icon="‚ÑπÔ∏è")
                    df = df[df['month'] != current_month].reset_index(drop = True)
        
                    last_day_of_last_month = (current_time.replace(day = 1) - pd.Timedelta(days = 1)).strftime('%d/%m/%Y')
                    date_ls = sorted(pd.date_range(start = f'1/1/{selected_year}', end = last_day_of_last_month, freq = 'D'))

                else: #‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
                    date_ls = sorted(pd.date_range(start = f'1/1/{selected_year}', end = f'31/12/{selected_year}', freq = 'D'))

            
            uncompleted_order_count = len(df[df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'] != '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß']['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'].unique().tolist())
            if uncompleted_order_count != 0:
                st.warning(f"‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {store} ‡∏à‡∏≤‡∏Å Shopee  ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏¢‡∏π‡πà {uncompleted_order_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ --> ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", icon="‚ö†Ô∏è")
            ##################################################################################################

            df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'], format = '%Y-%m-%d %H:%M').dt.date

            shopee_ls = []
            for date in date_ls:
                df1 = df[df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'] == date.date()]

                if df1.shape[0] == 0:
                    shopee_ls.append([date.strftime('%Y-%m-%d'), None, None])
                else:
                    order_value = 0
                    shipping_value = 0

                    for order_id in df1['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'].unique():
                        df2 = df1[df1['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'] == order_id].reset_index(drop = True)
                        order_value += df2['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏™‡∏∏‡∏ó‡∏ò‡∏¥'].sum() - float(df2['‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢'].tolist()[0])
                        shipping_value += float(df2['‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠'].tolist()[0])
                        
                    shopee_ls.append([date.strftime('%Y-%m-%d'), order_value, shipping_value])     

            shopee_result_df = pd.DataFrame(shopee_ls, columns = ['date', 'order_value', f'shipping_value']).fillna(0)
            shopee_result_df = shopee_result_df.set_index('date')
            shopee_result_df = shopee_result_df[['order_value', 'shipping_value']]
            shopee_result_df.columns = pd.MultiIndex.from_arrays([[store+'_shopee', store+'_shopee'], shopee_result_df.columns.tolist()])

            return shopee_result_df

    else:
        st.error(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏•‡∏∞ format ‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ --> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', icon="üö®")
        return None

@st.cache_data(show_spinner = False)
def total_sale_lazada(lazada_file, selected_year, store, is_full_year, current_month):
    df = pd.read_excel(lazada_file, converters={'orderNumber':str})

    if all(col in list(df.columns) for col in ['status', 'orderNumber', 'createTime', 'paidPrice']):
        df = df[~df['status'].isin(['canceled', 'returned', 'Package Returned'])]

        df['year'] = pd.to_datetime(df['createTime'], format = '%d %b %Y %H:%M').dt.year #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ ‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏´‡∏°
        df['month'] = pd.to_datetime(df['createTime'], format = '%d %b %Y %H:%M').dt.month #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

        #check ‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
        if df[df['year'].astype(int) != int(selected_year)].shape[0] != 0 and df[df['year'].astype(int) == int(selected_year)].shape[0] == 0: 
            st.error(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏Ç‡∏≠‡∏á Lazada: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏µ {selected_year} / ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ' + ', '.join(df['year'].astype(str).unique().tolist()) + '--> ‡∏≠‡∏≤‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏¥‡∏î', icon="üö®")
            return None
        else:
            if df[df['year'].astype(int) != int(selected_year)].shape[0] != 0:
                st.warning(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å Lazada ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ ' + ', '.join([y for y in df['year'].astype(str).unique().tolist() if y != selected_year]) +'‡∏ï‡∏¥‡∏î‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢' + '--> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', icon="‚ö†Ô∏è")

            #screen out year
            df = df[df['year'] == int(selected_year)]

            #check ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            ##################################################################################################
            # missing_month_ls = [m for m in [i for i in range(1, 13 if is_full_year else current_month + 1)] if m not in sorted(df['month'].unique().tolist())]

            if is_full_year: #get month_ls
                month_ls = [i for i in range(1, 13)]
            else: #not full year
                if current_month == 1:
                    month_ls = [1]
                else:
                    month_ls = [m for m in range(1, current_month)]
            missing_month_ls = [str(m) for m in month_ls if m not in df['month'].unique().tolist()]

            #‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
            if missing_month_ls != []:
                st.warning(f'‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà: ‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {store} ‡∏à‡∏≤‡∏Å Lazada ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà {",".join(missing_month_ls)}', icon="‚ö†Ô∏è")
            
            #screen out current month if current month != 1
            if current_month == 1 and selected_year == current_year: #‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1
                st.warning('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 1 ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏∞‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏∞', icon="‚ÑπÔ∏è")

                date_ls = sorted(pd.date_range(start = f'1/1/{selected_year}', end = current_time.strftime('%d/%m/%Y'), freq= 'D'))
            else:
                if selected_year == current_year: #‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 1 ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ ‡∏õ‡∏à‡∏ö
                    st.info('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏∂‡∏á‡πÅ‡∏Ñ‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì', icon="‚ÑπÔ∏è")
                    df = df[df['month'] != current_month].reset_index(drop = True)
                    
                    last_day_of_last_month = (current_time.replace(day = 1) - pd.Timedelta(days = 1)).strftime('%d/%m/%Y')
                    date_ls = sorted(pd.date_range(start = f'1/1/{selected_year}', end = last_day_of_last_month, freq = 'D'))
                else: #‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
                    date_ls = sorted(pd.date_range(start = f'1/1/{selected_year}', end = f'31/12/{selected_year}', freq = 'D'))
            
            uncompleted_order_count = len(df[df['status'] != 'confirmed']['status'].unique().tolist())
            if uncompleted_order_count != 0:
                st.warning(f"‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {store} ‡∏à‡∏≤‡∏Å Lazada ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏¢‡∏π‡πà {uncompleted_order_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ --> ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", icon="‚ö†Ô∏è")
                # st.dataframe(df[df['status'] != 'confirmed'])
            ##################################################################################################

            df['createTime'] = pd.to_datetime(df['createTime'], format = '%d %b %Y %H:%M').dt.date

            lazada_ls = []
            for date in date_ls:
                df1 = df[df['createTime'] == date.date()]

                if df1.shape[0] == 0:
                    lazada_ls.append([date.strftime('%Y-%m-%d'), None, None])
                else:
                    order_value = df1['paidPrice'].sum()
                    shipping_value = None
                    lazada_ls.append([date.strftime('%Y-%m-%d'), order_value, shipping_value])

            lazada_result_df = pd.DataFrame(lazada_ls, columns = ['date', 'order_value', 'shipping_value']).fillna(0)
            lazada_result_df = lazada_result_df.set_index('date')
            lazada_result_df = lazada_result_df[['order_value', 'shipping_value']]
            lazada_result_df.columns = pd.MultiIndex.from_arrays([[store+'_lazada', store+'_lazada'], lazada_result_df.columns.tolist()])

            return lazada_result_df
    else:
        st.error(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏•‡∏∞ format ‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ --> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', icon="üö®")
        return None

# def total_sale_lazada(lazada_file, selected_year, store, is_full_year, current_month):
@st.cache_data(show_spinner = False)
def total_sale_tiktok(tiktok_file, selected_year, store, is_full_year, current_month):
    # st.write(tiktok_file)
    df = pd.read_csv(tiktok_file, converters={'Order ID':str})
    # st.write(df.columns)

    if all(col in list(df.columns) for col in ['Order ID', 'Order Status', 'Created Time', 'SKU Subtotal Before Discount', 'Shipping Fee After Discount', 'SKU Seller Discount']):
        df = df[df['Order Status'] != 'Canceled'].drop_duplicates().reset_index(drop = True)

        df['year'] = pd.to_datetime(df['Created Time'], format = '%d/%m/%Y %H:%M:%S\t').dt.year #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ ‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏´‡∏°
        df['month'] = pd.to_datetime(df['Created Time'], format = '%d/%m/%Y %H:%M:%S\t').dt.month #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

        #check ‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
        if df[df['year'].astype(int) != int(selected_year)].shape[0] != 0 and df[df['year'].astype(int) == int(selected_year)].shape[0] == 0: 
            st.error(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å TikTok: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏µ {selected_year} / ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ' + ', '.join(df['year'].astype(str).unique().tolist()) + '--> ‡∏≠‡∏≤‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏¥‡∏î', icon="üö®")
            return None
        else:
            if df[df['year'].astype(int) != int(selected_year)].shape[0] != 0:
                st.warning(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å TikTok ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ ' + ', '.join([y for y in df['year'].astype(str).unique().tolist() if y != selected_year]) +'‡∏ï‡∏¥‡∏î‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢' + '--> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', icon="‚ö†Ô∏è")
            
            #screen out year
            df = df[df['year'] == int(selected_year)]

            #check ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            ##################################################################################################
            missing_month_ls = [m for m in [i for i in range(1, 13 if is_full_year else current_month + 1)] if m not in sorted(df['month'].unique().tolist())]

            if is_full_year: #get month_ls
                month_ls = [i for i in range(1, 13)]
            else: #not full year
                if current_month == 1:
                    month_ls = [1]
                else:
                    month_ls = [m for m in range(1, current_month)]
            missing_month_ls = [str(m) for m in month_ls if m not in df['month'].unique().tolist()]

            #‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
            if missing_month_ls != []:
                st.warning(f'‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà: ‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {store} ‡∏à‡∏≤‡∏Å TikTok ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà {", ".join(missing_month_ls)}', icon="‚ö†Ô∏è")
                return None
            #screen out current month if current month != 1
            if current_month == 1 and selected_year == current_year: #‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1
                st.warning('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 1 ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏∞‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏∞', icon="‚ÑπÔ∏è")

                date_ls = sorted(pd.date_range(start = f'1/1/{selected_year}', end = current_time.strftime('%d/%m/%Y'), freq= 'D'))
                # st.write(date_ls)
            else:
                if selected_year == current_year: #‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 1 ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ ‡∏õ‡∏à‡∏ö
                    st.info('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏∂‡∏á‡πÅ‡∏Ñ‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì', icon="‚ÑπÔ∏è")
                    df = df[df['month'] != current_month].reset_index(drop = True)
                    
                    last_day_of_last_month = (current_time.replace(day = 1) - pd.Timedelta(days = 1)).strftime('%d/%m/%Y')
                    date_ls = sorted(pd.date_range(start = f'1/1/{selected_year}', end = last_day_of_last_month, freq = 'D'))
                else: #‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
                    date_ls = sorted(pd.date_range(start = f'1/1/{selected_year}', end = f'31/12/{selected_year}', freq = 'D'))
            
            uncompleted_order_count = len(df[df['Order Status'] != 'Completed']['Order Status'].unique().tolist())
            if uncompleted_order_count != 0:
                st.warning(f"‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {store} ‡∏à‡∏≤‡∏Å TikTok ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏¢‡∏π‡πà {uncompleted_order_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ --> ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", icon="‚ö†Ô∏è")
                ##########

            df['Created Time'] = pd.to_datetime(df['Created Time'], format = '%d/%m/%Y %H:%M:%S\t').dt.date

            tiktok_ls = []
            for date in date_ls:
                df1 = df[df['Created Time'] == date.date()]

                if df1.shape[0] == 0:
                    tiktok_ls.append([date.strftime('%Y-%m-%d'), None, None])
                else:
                    order_value = 0
                    shipping_value = 0

                    for order_id in df1['Order ID'].unique():
                        df2 = df1[df1['Order ID'] == order_id].reset_index(drop = True)

                        order_value += df2['SKU Subtotal Before Discount'].str.replace('THB ', '').str.replace(',', '').astype(float).sum() - float(df2['SKU Seller Discount'].str.replace('THB ', '').str.replace(',', '').astype(float).sum())
                        shipping_value += float(df2.loc[0, 'Shipping Fee After Discount'].replace('THB ', '').replace(',', ''))
                        
                    tiktok_ls.append([date.strftime('%Y-%m-%d'), order_value, shipping_value])
                
            tiktok_result_df = pd.DataFrame(tiktok_ls, columns = ['date', 'order_value', 'shipping_value']).fillna(0)
            tiktok_result_df = tiktok_result_df.set_index('date')
            tiktok_result_df = tiktok_result_df[['order_value', 'shipping_value']]
            tiktok_result_df.columns = pd.MultiIndex.from_arrays([[store+'_tiktok', store+'_tiktok'], tiktok_result_df.columns.tolist()])

            return tiktok_result_df
    else:
        st.error(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏•‡∏∞ format ‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ --> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', icon="üö®")
        # print('aaa')
        return None

#%% function for page '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì vat'
@st.cache_data(show_spinner=False)
def vat_cal_sale_shopee(shopee_sale_file, year, store, month):
    df = pd.read_excel(shopee_sale_file, converters={'‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠':str})
    df = df[~df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'].isin(['‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß'])].drop_duplicates()

    df['year'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'], format = '%Y-%m-%d %H:%M').dt.year #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ ‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏´‡∏°
    df['month'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'], format = '%Y-%m-%d %H:%M').dt.month #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

    #check ‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    if df[df['year'].astype(int) != int(year)].shape[0] != 0 and df[df['year'].astype(int) == int(year)].shape[0] == 0: 
        st.error(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å Shopee: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {month}/{year} ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ' + '--> ‡∏≠‡∏≤‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏¥‡∏î', icon="üö®")
        # st.dataframe(df)
        return None
    
    else:
        if df[(df['year'].astype(int) != int(year)) & (df['month'].astype(int) != int(month))].shape[0] != 0:
            st.warning(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å Shopee: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {month}/{year} ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡∏¥‡∏î‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢' + '--> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', icon="‚ö†Ô∏è")

        #screen out year
        df = df[(df['year'] == int(year)) & (df['month'] == month)].reset_index(drop = True)

        uncompleted_order_count = len(df[df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'] != '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß']['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'].unique().tolist())
        if uncompleted_order_count != 0:
            st.warning(f"‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {store} (Shopee) ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏¢‡∏π‡πà {uncompleted_order_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ --> ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", icon="‚ö†Ô∏è")

        df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'], format = '%Y-%m-%d %H:%M').dt.date
        # shopee_sale_df['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'] = shopee_sale_df['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'].astype(str)
        df = df[['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠)', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏™‡∏∏‡∏ó‡∏ò‡∏¥', '‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢', '‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠', '‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà Shopee ‡∏≠‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì', '‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏ô', '‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì']]

        sale_ls = []
        for order_id in df['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'].unique():
            df1 = df[df['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'] == order_id].reset_index(drop = True)
            order_date = df1.loc[0, '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠']
            order_no = df1.loc[0, '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠']
            customer_name = df1.loc[0, '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠)']
            seller_discount_code = float(df1.loc[0, '‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢'])
            include_vat = df1['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏™‡∏∏‡∏ó‡∏ò‡∏¥'].sum() - seller_discount_code
            vat = round((include_vat * 0.07) / 1.07, 2)
            before_vat = include_vat - vat
            status = df1.loc[0, '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠']

            sale_ls.append(['Shopee', store, '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', order_date, status, order_no, customer_name, before_vat, vat, include_vat])

            shipping_fee_from_buyer = df1.loc[0, '‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠']
            if float(shipping_fee_from_buyer) != 0:
                shipping_vat = round((shipping_fee_from_buyer * 0.07) / 1.07, 2)
                shipping_before_vat = shipping_fee_from_buyer - shipping_vat
                sale_ls.append(['Shopee', store, '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', order_date, status, order_no, customer_name, shipping_before_vat, shipping_vat, shipping_fee_from_buyer])

        shopee_sale_df_result = pd.DataFrame(sale_ls, columns = ['platform', 'store_name', 'type', 'order_date', 'status', 'order_no', 'customer_name', 'before_vat', 'vat', 'include_vat'])
        shopee_sale_df_result = shopee_sale_df_result[['platform', 'store_name', 'type', 'order_date', 'status', 'order_no', 'customer_name', 'before_vat', 'vat', 'include_vat']]

    return shopee_sale_df_result
    
@st.cache_data(show_spinner=False)
def vat_cal_sale_lazada(lazada_sale_file, year, store, month):
    df = pd.read_excel(lazada_sale_file, converters={'orderNumber':str})
    df = df[~df['status'].isin(['canceled', 'returned', 'Package Returned'])].drop_duplicates().reset_index(drop = True)

    df['year'] = pd.to_datetime(df['createTime'], format = '%d %b %Y %H:%M').dt.year #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ ‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏´‡∏°
    df['month'] = pd.to_datetime(df['createTime'], format = '%d %b %Y %H:%M').dt.month #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

    #check ‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    if df[df['year'].astype(int) != int(year)].shape[0] != 0 and df[df['year'].astype(int) == int(year)].shape[0] == 0: 
        st.error(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å Lazada: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏µ {year} / ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ' + ', '.join(df['year'].astype(str).unique().tolist()) + '--> ‡∏≠‡∏≤‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏¥‡∏î', icon="üö®")
        # st.dataframe(df)
        return None
    else:
        if df[(df['year'].astype(int) != int(year)) & (df['month'].astype(int) != int(month))].shape[0] != 0:
            st.warning(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} ‡∏à‡∏≤‡∏Å Lazada: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {month}/{year} ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡∏¥‡∏î‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢' + '--> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', icon="‚ö†Ô∏è")

        #screen out year
        df = df[(df['year'] == int(year)) & (df['month'] == month)].reset_index(drop = True)

        uncompleted_order_count = len(df[df['status'] != 'confirmed']['status'].unique().tolist())
        if uncompleted_order_count != 0:
            st.warning(f"‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {store} (Lazada) ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏¢‡∏π‡πà {uncompleted_order_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ --> ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", icon="‚ö†Ô∏è")
            # st.dataframe(df[df['status'] != 'confirmed'])
        ##################################################################################################

    df['createTime'] = pd.to_datetime(df['createTime'], format = '%d %b %Y %H:%M').dt.date
    df = df[['status', 'createTime', 'orderNumber', 'customerName', 'paidPrice', 'sellerDiscountTotal']]

    sale_ls = []
    for order_id in df['orderNumber'].unique():
        df1 = df[df['orderNumber'] == order_id].reset_index(drop = True)

        order_date = df1.loc[0, 'createTime']
        order_no = str(df1.loc[0, 'orderNumber'])
        customer_name = df1.loc[0, 'customerName']
        include_vat = df1['paidPrice'].sum()
        vat = round((include_vat * 0.07) / 1.07, 2)
        before_vat = include_vat - vat

        status = df1.loc[0, 'status']

        sale_ls.append(['Lazada', store, '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', order_date, status, order_no, customer_name, before_vat, vat, include_vat])

    lazada_sale_df_result = pd.DataFrame(sale_ls, columns = ['platform', 'store_name', 'type', 'order_date', 'status', 'order_no', 'customer_name', 'before_vat', 'vat', 'include_vat'])
    lazada_sale_df_result = lazada_sale_df_result[['platform', 'store_name', 'type', 'order_date', 'status', 'order_no', 'customer_name', 'before_vat', 'vat', 'include_vat']]

    return lazada_sale_df_result

@st.cache_data(show_spinner=False)
def vat_cal_sale_tiktok(tiktok_sale_file, year, store, month):
    df = pd.read_csv(tiktok_sale_file, converters={'Order ID':str})
    df = df[~df['Order Status'].isin(['Canceled'])]
    df = df[df['Order Status'] != 'Canceled'].drop_duplicates().reset_index(drop = True)

    df['year'] = pd.to_datetime(df['Created Time'], format = '%d/%m/%Y %H:%M:%S\t').dt.year #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ ‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏´‡∏°
    df['month'] = pd.to_datetime(df['Created Time'], format = '%d/%m/%Y %H:%M:%S\t').dt.month #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

    #check ‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    if df[df['year'].astype(int) != int(year)].shape[0] != 0 and df[df['year'].astype(int) == int(year)].shape[0] == 0: 
        st.error(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} | TikTok: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏µ {year} / ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ' + ', '.join(df['year'].astype(str).unique().tolist()) + '--> ‡∏≠‡∏≤‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏¥‡∏î', icon="üö®")
        return None
    else:
        if df[(df['year'].astype(int) != int(year)) & (df['month'].astype(int) != int(month))].shape[0] != 0:
            st.warning(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {store} | TikTok: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {month}/{year} ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡∏¥‡∏î‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢' + '--> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', icon="‚ö†Ô∏è")

        #screen out year
        df = df[(df['year'] == int(year)) & (df['month'] == month)].reset_index(drop = True)

        uncompleted_order_count = len(df[df['Order Status'] != 'Completed']['Order Status'].unique().tolist())
        if uncompleted_order_count != 0:
            st.warning(f"‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô {store} (TikTok) ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏¢‡∏π‡πà {uncompleted_order_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ --> ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", icon="‚ö†Ô∏è")
            ##########

    df['SKU Subtotal Before Discount'] = df['SKU Subtotal Before Discount'].str.replace('THB ', '').str.replace(',', '').astype(float)
    df['SKU Seller Discount'] = df['SKU Seller Discount'].str.replace('THB ', '').str.replace(',', '').astype(float)
    df['Shipping Fee After Discount'] = df['Shipping Fee After Discount'].str.replace('THB ', '').str.replace(',', '').astype(float)
    df = df[['Order Status', 'Created Time', 'Order ID', 'Buyer Username', 'SKU Subtotal Before Discount', 'SKU Seller Discount',
                                    'Shipping Fee After Discount']]

    sale_ls = []
    for order_id in df['Order ID'].unique():
        df1 = df[df['Order ID'] == order_id].reset_index(drop = True)

        order_date = df1.loc[0, 'Created Time']
        order_no = str(df1.loc[0, 'Order ID']).replace('\t', '')
        customer_name = df1.loc[0, 'Buyer Username']
        seller_discount_code = float(df1['SKU Seller Discount'].sum())
        include_vat = df1['SKU Subtotal Before Discount'].sum() - seller_discount_code
        vat = round((include_vat * 0.07) / 1.07, 2)
        before_vat = include_vat - vat

        status = df1.loc[0, 'Order Status']

        sale_ls.append(['TikTok', store, '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', order_date, status, order_no, customer_name, before_vat, vat, include_vat])

        shipping_fee_from_buyer = df1.loc[0, 'Shipping Fee After Discount']

        if float(shipping_fee_from_buyer) != 0:
            shipping_vat = round((shipping_fee_from_buyer * 0.07) / 1.07, 2)
            shipping_before_vat = shipping_fee_from_buyer - shipping_vat
            sale_ls.append(['TikTok', store, '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', order_date, status, order_no, customer_name, shipping_before_vat, shipping_vat, shipping_fee_from_buyer])


    tiktok_sale_df_result = pd.DataFrame(sale_ls, columns = ['platform', 'store_name', 'type', 'order_date', 'status', 'order_no', 'customer_name', 'before_vat', 'vat', 'include_vat'])
    tiktok_sale_df_result = tiktok_sale_df_result[['platform', 'store_name', 'type', 'order_date', 'status', 'order_no', 'customer_name', 'before_vat', 'vat', 'include_vat']]

    return tiktok_sale_df_result  

@st.cache_data(show_spinner=False)
def vat_cal_commission_shopee(store_name, shopee_zip_file, month, year):
    commission_ls = []
    pdf_ls = []
    doc_date_not_in_target_month_count = 0

    progress_bar = st.progress(0, text = 'processing shopee commission pdf')
    with zipfile.ZipFile(shopee_zip_file, 'r') as z:
        sorted_file_ls = ['-'.join(ls) for ls in sorted([n.split('-') for n in z.namelist() if 'SPX' not in n], key = lambda x: int(x[4]))]
        
                            
        for i, file_name in enumerate(sorted_file_ls):
            if 'SPX' in file_name:
                progress_bar.progress((i + 1) / len(sorted_file_ls), text = 'reading shopee commission pdf files')
            else:
                pdf_file = pypdf.PdfReader(BytesIO(z.read(file_name)))
                doc_date, doc_num, issued_company, before_vat, vat, company_name, company_tax_id = None, None, None, None, None, None, None

                for j, text in enumerate(pdf_file.pages[0].extract_text().split('\n')):
                    if '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' in text and '‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' not in text:
                        doc_date = pd.to_datetime(text.split(' ')[-1], format = '%d/%m/%Y').date()
                    elif 'Co.,' in text:
                        issued_company = text
                    elif '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà' in text:
                        doc_num = text.split('No. ')[-1] + ' ' + pdf_file.pages[0].extract_text().split('\n')[j + 1]
                        if '‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ' in text:
                            company_tax_id = text.split('Tax ID ')[1].split('‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà/')[0]
                    elif '‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ' in text:
                        company_tax_id = text.split('Tax ID ')[1].split('‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà/')[0]
                    elif 'after discount' in text:
                        before_vat = round(float(text.split(' ')[-1].replace(',', '')), 2)
                    elif 'VAT' in text and '7%' in text:
                        vat = round(float(text.split(' ')[-1].replace(',', '')), 2)
                    elif 'Customer name' in text:
                        company_name = text.split('Customer name ')[-1]
                                
            if None in [doc_date, company_name, company_tax_id, issued_company, doc_num, before_vat, vat]:
                st.error(f'format file ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏Ç‡∏≠‡∏á Shopee ‡∏£‡πâ‡∏≤‡∏ô {store_name} (‡πÑ‡∏ü‡∏•‡πå: {file_name}) ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô format ‡∏ó‡∏µ‡πà‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ page vat_cal', icon="üö®")
                return None
            else:
                if doc_date.month == month and doc_date.year == year:
                    commission_ls.append([store_name, 'Shopee', doc_date, company_name, company_tax_id, issued_company, doc_num, before_vat, vat])
                    pdf_ls.append([company_name, 'Shopee', company_tax_id, doc_date, BytesIO(z.read(file_name)), store_name])
                    progress_bar.progress((i + 1) / len(sorted_file_ls), text = f'reading {store} Shopee commission files')
                else:
                    doc_date_not_in_target_month_count += 1
                    progress_bar.progress((i + 1) / len(sorted_file_ls), text = f'reading {store} Shopee commission files')

    if doc_date_not_in_target_month_count != 0:
        st.warning(f'‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏Ç‡∏≠‡∏á Shopee {doc_date_not_in_target_month_count} ‡πÑ‡∏ü‡∏•‡πå ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {month} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', icon = '‚ö†Ô∏è')

    progress_bar.empty()

    return  {
        'commission_df': pd.DataFrame(commission_ls, columns = ['store_name', 'platform', 'doc_date', 'company_name', 'company_tax_id', 'issue_comapny', 'doc_num', 'before_vat', 'vat']), 
        'pdf_df': pd.DataFrame(pdf_ls, columns = ['company_name', 'platform', 'company_tax_id', 'doc_date', 'pdf_file', 'store_name'])
        }

@st.cache_data(show_spinner=False)
def vat_cal_commission_lazada(store_name, lazada_file_ls, month, year):
    ls = []
    pdf_ls = []
    doc_num_ls = []
    doc_date_not_in_target_month_count = 0

    progress_bar = st.progress(0, text = 'processing Lazada commission pdf')
    for file_order, file_name in enumerate(lazada_file_ls):
        pdf_file = pypdf.PdfReader(file_name)

        if 'Lazada Express Limited' in pdf_file.pages[0].extract_text() or 'Shipping Fee' in pdf_file.pages[0].extract_text():
            progress_bar.progress((file_order + 1) / len(lazada_file_ls), text = 'reading Lazada commission pdf files')
        
        else: 
            doc_date, doc_num, issued_company, before_vat, vat, company_name, company_tax_id = None, None, None, None, None, None, None

            #‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ 'TAX INVOICE / RECEIPT'
            if 'TAX INVOICE / RECEIPT' in pdf_file.pages[0].extract_text():
                # st.write(pdf_file.pages[0].extract_text().split('\n'))
                for j, text in enumerate(pdf_file.pages[0].extract_text().split('\n')):
                    if 'Invoice Date' in text:
                        doc_date = pd.to_datetime(text.split(': ')[-1], format = '%Y-%m-%d').date()
                    elif 'Lazada' in text:
                        issued_company = text
                    elif 'Total' in text and '(Including Tax)' not in text:
                        before_vat = float(text.split(' ')[-1].replace(',', ''))
                    elif '7% (VAT)' in text:
                        vat = float(text.split(') ')[-1].replace(',', ''))
                    elif 'Invoice No.:' in text:
                        doc_num = text.split(' ')[-1]
                    elif 'TAX INVOICE / RECEIPT' in text:
                        company_name = pdf_file.pages[0].extract_text().split('\n')[j + 2]
                        company_tax_id = pdf_file.pages[0].extract_text().split('\n')[j + 7].split('Tax ID: ')[-1].split('Invoice')[0]
            
            #‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô --> ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏Ñ‡∏∑‡∏≠ ‡πÉ‡∏ö‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
            elif 'CREDIT NOTE' in pdf_file.pages[0].extract_text() and 'Reversal Commission' in pdf_file.pages[0].extract_text():
                # st.write(pdf_file.pages[0].extract_text().split('\n'))
                for j, text in enumerate(pdf_file.pages[0].extract_text().split('\n')):
                    if 'Date: ' in text:
                        doc_date = pd.to_datetime(text.split(': ')[-1], format = '%Y-%m-%d').date()
                    elif 'Lazada' in text:
                        issued_company = text
                    elif 'Total' in text and '(Including Tax)' not in text:
                        before_vat = float(text.split(' ')[-1].replace(',', '')) * -1
                    elif '7% (VAT)' in text:
                        vat = float(text.split(') ')[-1].replace(',', '')) * -1
                    elif 'CREDIT NOTE' in text:
                        company_name = pdf_file.pages[0].extract_text().split('\n')[j + 2].replace('  ', ' ')
                        company_tax_id = pdf_file.pages[0].extract_text().split('\n')[j + 7].split('Tax ID: ')[-1].split('Credit Note')[0]
                    elif 'Credit Note: ' in text:
                        doc_num = text.split('Credit Note: ')[-1]
                    
            if None in [doc_date, company_name, company_tax_id, issued_company, doc_num, before_vat, vat]:
                st.error(f'format file ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏Ç‡∏≠‡∏á Lazada ‡∏£‡πâ‡∏≤‡∏ô {store_name} (‡πÑ‡∏ü‡∏•‡πå: {file_name}) ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô format ‡∏ó‡∏µ‡πà‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ page vat_cal', icon="üö®")
                return None
            elif doc_num in doc_num_ls: #‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô ‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ã‡πâ‡∏≥ ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡∏ã‡πâ‡∏≥
                progress_bar.progress((file_order + 1) / len(lazada_file_ls), text = 'reading Lazada commission pdf files')
            else:
                if doc_date.month == month and doc_date.year == year:
                    ls.append([store_name, 'Lazada', doc_date, company_name, company_tax_id, issued_company, doc_num, before_vat, vat])
                    pdf_ls.append([company_name, 'Lazada', company_tax_id, doc_date, file_name, store_name])
                    doc_num_ls.append(doc_num) #‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡∏Å‡∏±‡∏ô ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ñ‡∏ô‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏ã‡πâ‡∏≥
                    progress_bar.progress((i + 1) / len(lazada_file_ls), text = f'reading {store_name} Lazada commission files')
                else:
                    doc_date_not_in_target_month_count += 1
                    progress_bar.progress((i + 1) / len(lazada_file_ls), text = f'reading {store_name} Lazada commission files')
                

    if doc_date_not_in_target_month_count != 0:
        st.warning(f'‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏Ç‡∏≠‡∏á Lazada {doc_date_not_in_target_month_count} ‡πÑ‡∏ü‡∏•‡πå ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {month} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', icon = '‚ö†Ô∏è')

    progress_bar.empty()

    return {
        'commission_df': pd.DataFrame(ls, columns = ['store_name', 'platform', 'doc_date', 'company_name', 'company_tax_id', 'issue_comapny', 'doc_num', 'before_vat', 'vat']), 
        'pdf_df': pd.DataFrame(pdf_ls, columns = ['company_name', 'platform', 'company_tax_id', 'doc_date', 'pdf_file', 'store_name'])
    }

st.cache_data(show_spinner = False)
def vat_cal_commission_tiktok(store_name, tiktok_zip_file, month, year):
    ls = []
    pdf_ls = []
    doc_date_not_in_target_month_count = 0

    progress_bar = st.progress(0, text = 'processing TikTok commission pdf')
    with zipfile.ZipFile(tiktok_zip_file,'r') as z:
        sorted_file_ls = sorted([n for n in z.namelist() if 'THJV' not in n and 'TTSTHAC' not in n])

        for i, file_name in enumerate(sorted_file_ls):
            if 'THJV' in file_name or 'TTSTHAC' in file_name:
                progress_bar.progress((i + 1) / len(sorted_file_ls), text='reading tiktok commission pdf files')
            else:
                # pdf_file = pypdf.PdfReader(BytesIO(z.read(file_name)))
                pdf_file = pypdf.PdfReader(BytesIO(z.read(file_name)))
                doc_date, doc_num, issued_company, before_vat, vat, company_name, company_tax_id = None, None, None, None, None, None, None
                for j, text in enumerate(pdf_file.pages[0].extract_text().split('\n')):
                    if 'Invoice date' in text:
                        doc_date = pd.to_datetime(text.split(' : ')[-1], format = '%b %d, %Y').date()
                    elif 'Ltd.' in text and 'prepared by' not in text and 'For corporate' not in text:
                        issued_company = text
                    elif 'Invoice number : ' in text:
                        doc_num = text.split('Invoice number : ')[-1]
                    elif 'Subtotal (excluding VAT)' in text:
                        before_vat = float(text.split(' ')[-1].replace(',', '').replace('‡∏ø', ''))
                    elif 'Total VAT' in text and '7%' in text:
                        vat = float(text.split(' ')[-1].replace(',', '').replace('‡∏ø', '')) 
                    elif 'Client Name' in text:
                        company_name = text.split('Client Name: ')[-1]
                    elif 'Tax ID:' in text:
                        company_tax_id = text.split(': ')[-1]

                if None in [doc_date, company_name, company_tax_id, issued_company, doc_num, before_vat, vat]:
                    st.error(f'format file ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏Ç‡∏≠‡∏á TikTok ‡∏£‡πâ‡∏≤‡∏ô {store_name} (‡πÑ‡∏ü‡∏•‡πå: {file_name}) ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô format ‡∏ó‡∏µ‡πà‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ page vat_cal', icon="üö®")
                    return None
                else:
                    if doc_date.month == month and doc_date.year == year:
                        ls.append([store_name, 'TikTok', doc_date, company_name, company_tax_id, issued_company, doc_num, before_vat, vat])
                        pdf_ls.append([company_name, 'TikTok', company_tax_id, doc_date, BytesIO(z.read(file_name)), store_name])
                        progress_bar.progress((i + 1) / len(sorted_file_ls), text = f'reading {store} Shopee commission files')
                    else:
                        doc_date_not_in_target_month_count += 1
                
        if doc_date_not_in_target_month_count != 0:
            st.warning(f'‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏Ç‡∏≠‡∏á TikTok {doc_date_not_in_target_month_count} ‡πÑ‡∏ü‡∏•‡πå ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {month} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', icon = '‚ö†Ô∏è')
    
        progress_bar.empty()

    return {
            'commission_df': pd.DataFrame(ls, columns = ['store_name', 'platform', 'doc_date', 'company_name', 'company_tax_id', 'issue_comapny', 'doc_num', 'before_vat', 'vat']), 
            'pdf_df': pd.DataFrame(pdf_ls, columns = ['company_name', 'platform', 'company_tax_id', 'doc_date', 'pdf_file', 'store_name'])
        }

#%% sidebar
st.set_page_config(page_icon = Image.open("icon.ico"))
with st.sidebar:
    st.header('‚úÖ VAT Cal', divider = 'orange')
    st.write('#')

    st.subheader('üõí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ')
    store_number = st.selectbox(
        label = '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ', 
        options = [i for i in range(1, 4)],
        label_visibility = 'collapsed'
    )

    st.markdown('<hr style="margin-top: 0px; margin-bottom: 0px;">', unsafe_allow_html=True)

    st.subheader('üõçÔ∏è ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤')

    store_name_ls = []
    for i in range(store_number):
        store_name = st.text_input(
            label = f'&nbsp;&nbsp;‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ #{i + 1}', 
            label_visibility = 'visible'
            )
        if store_name in store_name_ls and store_name != '':
            st.error('‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≥')
            break

        if '_' in store_name:
            st.error('‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö "_" ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô')
        store_name_ls.append(store_name)

    st.markdown('<hr style="margin-top: 0px; margin-bottom: 0px;">', unsafe_allow_html=True)
    st.subheader('‚öôÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì')
    sidebar_radio = st.radio(
        label = '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì',
        options = ['‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏î VAT ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á', '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì VAT', 'Q&A'], 
        index = 1, 
        label_visibility = 'collapsed'
    )

    # with st.form('üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ'):
    #     st.write("""‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ ‡∏Ñ‡∏∑‡∏≠\n
    #                 1. ‡∏Å‡∏î‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô\n
    #                 2. ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå\n
    #                 3. ‡∏Å‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì\n
    #                 4. ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏õ‡∏ó‡∏≤‡∏á email\n
    #                 ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡πà‡∏á‡∏™‡∏±‡∏¢‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏≤‡∏á Page VAT Cal ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö""")
#%%
if sidebar_radio == '‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏î VAT ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á':
    before_session_key = st.session_state.keys()

    st.header(f'üîé {sidebar_radio}', divider='grey')
    
    st.write('')
    st.subheader('1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö')
    # st.markdown('<hr style="margin-top: 0px; margin-bottom: 0px;">', unsafe_allow_html=True)
    selected_year = st.selectbox(
        label = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì",
        options = (str(pd.Timestamp.today().year), (str(pd.Timestamp.today().year - 1) + ' (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏≠‡∏î‡∏ñ‡∏∂‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏à‡∏î VAT ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏õ‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà)')), 
        index = None, 
        placeholder = '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ',
        label_visibility = 'collapsed'
    )
    st.markdown('<hr style="margin-top: 0px; margin-bottom: 0px;">', unsafe_allow_html=True)
    if selected_year != None:
        selected_year = selected_year.split(' ')[0]
        current_time = pd.to_datetime('today') #+ pd.Timedelta(hours = 7)
        current_day = pd.to_datetime('today').day
        current_year = pd.to_datetime('today').year
        current_month = pd.to_datetime('today').month
        is_full_year = True if current_year - 1 == int(selected_year) else True if current_month == 12 and current_day == 31 else False

    
    ############################################################
        if len([store_name for store_name in store_name_ls if store_name != '']) == store_number:
            st.write('')
            
            for i, store_name in enumerate(store_name_ls):

                st.subheader(f'2.{i + 1} {store_name}')
                st.write('')
                st.markdown(f'<h5>&nbsp;&nbsp;üóÇÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å platform ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà {store_name} ‡∏Ç‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà</h5>', unsafe_allow_html=True)
                selected_platfrom = st.multiselect(
                        label = f'‡πÄ‡∏•‡∏∑‡∏≠‡∏Å platform ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà **{store_name}** ‡∏Ç‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà', 
                        options = ['Shopee', 'Lazada', 'TikTok'], 
                        default = ['Shopee', 'Lazada', 'TikTok'], 
                        placeholder = f'‡πÄ‡∏•‡∏∑‡∏≠‡∏Å e-commerce platform ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô {store_name} ‡∏Ç‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà', 
                        key = f'selected_platform_{store_name}', 
                        label_visibility = 'collapsed'
                    )
                
                selected_platform = [p for p in ['Shopee', 'Lazada', 'TikTok'] if p in st.session_state[f'selected_platform_{store_name}']]

                st.write('')
                st.markdown(f'<h5>&nbsp;&nbsp;üóÇÔ∏è Upload ‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢</h5>', unsafe_allow_html=True)

                if selected_platform != []:
                    # if  f'{store_name}_current_select_tab' not in st.session_state:
                    #     st.session_state[f'{store_name}_current_select_tab'] = selected_platform[0]

                    tabs = st.tabs([f'Upload file: {platform}' for platform in selected_platform])
                    for j, tab in enumerate(tabs):
                        with tab:
                            tab_name = selected_platform[j]
                            # st.write(tab_name)
                            st.session_state[f'{store_name}_current_select_tab'] = tab_name
            
                            ################ upload shopee #################
                            if tab_name == 'Shopee': 
                                with st.popover("üì• ‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ Download ‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å Shopee", use_container_width = True):
                                    st.write('''
                                        1. Log in ‡πÄ‡∏Ç‡πâ‡∏≤ Shopee Seller Center\n
                                        2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"\n
                                        3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"\n
                                        4. ‡∏Å‡∏î "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î" (‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô)\n 
                                        5. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤**\n
                                        \n
                                        ** **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏**: ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á Shopee ‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                                        **‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô** ‡πÅ‡∏•‡∏∞ **‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å
                                        ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô** ‡πÉ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
                                    ''')
                                shopee_files = st.file_uploader(
                                    label = f'** ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô (.xlsx)', 
                                    accept_multiple_files = True,
                                    type = 'xlsx', 
                                    key = f"sale_file_{store_name}_{tab_name}"
                                )

                                if shopee_files != None and shopee_files != []:
                                    st.success(f'‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î {len(shopee_files)} ‡πÑ‡∏ü‡∏•‡πå ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', icon="‚úÖ")
                                else:
                                    st.warning(f'‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å upload ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à tab ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß', icon="‚ÑπÔ∏è")
                                
                            ################# upload lazada #################
                            elif tab_name == 'Lazada':
                                with st.popover("üì• ‡∏Å‡∏î‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ Download ‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å Lazada", use_container_width = True):
                                    st.write('''
                                        1. Log in ‡πÄ‡∏Ç‡πâ‡∏≤ Lazada Seller Center
                                        2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"\n
                                        3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"\n
                                        4. ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" --> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á" ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤ (‡∏™‡∏≤‡∏°‡∏≤‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ)\n 
                                        5. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Export" ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Export All"\n
                                    ''')
                                lazada_file = st.file_uploader(
                                    label = f'** ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î 1 ‡πÑ‡∏ü‡∏•‡πå (.xlsx)', 
                                    accept_multiple_files = False, 
                                    type = 'xlsx',
                                    key = f'sale_file_{store_name}_{tab_name}'
                                )
                                if lazada_file != None:
                                    st.success(f'‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', icon="‚úÖ")
                                else:
                                    st.warning(f'‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å upload ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à tab ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß', icon="‚ÑπÔ∏è")

                            ################# upload TikTok #################
                            elif tab_name == 'TikTok':    
                                with st.popover("üì• ‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ Download ‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å TikTok", use_container_width = True):
                                    st.write('''
                                        1. Log in ‡πÄ‡∏Ç‡πâ‡∏≤ TikTok Seller Center
                                        2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" -> "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"\n
                                        3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"\n
                                        4. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á"\n 
                                        5. ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á "‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á" ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏™‡∏≤‡∏°‡∏≤‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ)\n
                                        6. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ"\n
                                        7. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î"\n
                                        8. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "CSV" ‡πÅ‡∏•‡∏∞‡∏Å‡∏î "‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å"\n
                                        9. ‡∏Å‡∏î "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î"\n     
                                    ''')
                                tiktok_file = st.file_uploader(
                                    label = f'** ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î 1 ‡πÑ‡∏ü‡∏•‡πå (.csv)', 
                                    accept_multiple_files = False, 
                                    type = 'csv',
                                    key = f'sale_file_{store_name}_{tab_name}'
                                )   
                                if tiktok_file != None:
                                    st.success(f'‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', icon="‚úÖ")
                                else:
                                    st.warning(f'‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å upload ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à tab ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß', icon="‚ÑπÔ∏è")
            
                for platform in ['Shopee', 'Lazada', 'TikTok']:
                    if platform not in selected_platform:
                        if f'sale_file_{store_name}_{platform}' in st.session_state.keys():
                            del st.session_state[f'sale_file_{store_name}_{platform}']
                
                st.markdown('<hr style="margin-top: 0px; margin-bottom: 0px;">', unsafe_allow_html=True)
            
            del_ls = []
            for key in st.session_state:
                if 'selected_platform' in key:
                    store_name = key.replace('selected_platform_', '')
                    if store_name not in store_name_ls:
                        if key in st.session_state.keys():
                            del st.session_state[key]
                        # if f'{store_name}_current_select_tab' in st.session_state.keys():
                        #     del st.session_state[f'{store_name}_current_select_tab']
                        if f'sale_file_{store_name}_Shopee' in st.session_state.keys():
                            del st.session_state[f'sale_file_{store_name}_Shopee']
                        if f'sale_file_{store_name}_Lazada' in st.session_state.keys():
                            del st.session_state[f'sale_file_{store_name}_Lazada']
                        if f'sale_file_{store_name}_TikTok' in st.session_state.keys():
                            del st.session_state[f'sale_file_{store_name}_TikTok']

            selected_platform_d = {key: value for key, value in st.session_state.items() if 'selected_platform' in key if value != []}
            check_ls = []
            if selected_platform_d != {}:
                for store, platform_ls in selected_platform_d.items():
                    store_name = store.replace('selected_platform_', '')
                    for platform in platform_ls:
                        if f'sale_file_{store_name}_{platform}' not in st.session_state.keys():
                            check_ls.append(f'‡∏£‡πâ‡∏≤‡∏ô {store_name} {platform}')
                        else:
                            if st.session_state[f'sale_file_{store_name}_{platform}'] == None or st.session_state[f'sale_file_{store_name}_{platform}'] == []:
                                check_ls.append(f'‡∏£‡πâ‡∏≤‡∏ô {store_name} ({platform})')
            else:
                check_ls.append('')

            if check_ls == []: #‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß
                if 'calculate_clicked' not in st.session_state or before_session_key != st.session_state.keys():
                    st.session_state['calculate_clicked'] = False

                cont = False
                col1, col2, col3 = st.columns(3)
                
                with col2:
                    st.write('')
                    if st.button('üì¨ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì', use_container_width = True):
                        st.session_state['calculate_clicked'] = True
                        # cont = True

                if st.session_state['calculate_clicked']:
                    st.write('')
                    st.subheader('3. ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì')
                    
                    st.session_state['total_sale'] = 0

                    st.session_state['df_dict'] = {}
    
                    cont=True
                    for key, value in st.session_state.items():
                        if 'sale_file' in key and 'Shopee' in key:
                            store = key.split('_')[-2]
                            if store not in st.session_state['df_dict'].keys():
                                st.session_state['df_dict'][store] = {}

                            shopee_result_df = total_sale_shopee(shopee_file_ls = value, selected_year = selected_year, store = store, is_full_year=is_full_year, current_month = current_month)
                            if shopee_result_df is not None and not shopee_result_df.empty:
                                st.session_state['total_sale'] += shopee_result_df[store+'_shopee']['order_value'].sum() + shopee_result_df[store+'_shopee']['shipping_value'].sum()
                                st.session_state['df_dict'][store]['Shopee'] = shopee_result_df
                            else:
                                cont = False

                        elif 'sale_file' in key and 'Lazada' in key:
                            store = key.split('_')[-2]
                            if store not in st.session_state['df_dict'].keys():
                                st.session_state['df_dict'][store] = {}

                            lazada_result_df = total_sale_lazada(lazada_file = value, selected_year = selected_year, store = store, is_full_year = is_full_year, current_month = current_month)
                            if lazada_result_df is not None and not lazada_result_df.empty:
                                st.session_state['total_sale'] += lazada_result_df[store+'_lazada']['order_value'].sum() + lazada_result_df[store+'_lazada']['shipping_value'].sum()
                                st.session_state['df_dict'][store]['Lazada'] = lazada_result_df
                            else: 
                                cont = False
                        
                        elif 'sale_file' in key and 'TikTok' in key:
                            store = key.split('_')[-2]
                            if store not in st.session_state['df_dict'].keys():
                                st.session_state['df_dict'][store] = {}

                            tiktok_result_df = total_sale_tiktok(tiktok_file = value, selected_year = selected_year, store = store, is_full_year = is_full_year, current_month = current_month)
                                
                            # st.write(tiktok_result_df.empty)
                            if tiktok_result_df is not None and not tiktok_result_df.empty:
                                st.session_state['total_sale'] += tiktok_result_df[store+'_tiktok']['order_value'].sum() + tiktok_result_df[store+'_tiktok']['shipping_value'].sum()
                                st.session_state['df_dict'][store]['TikTok'] = tiktok_result_df
                            else:
                                cont = False

                    if cont:
                        
                        if 'result_df' not in st.session_state:
                            st.session_state['result_df'] = pd.DataFrame()
                    
                        result_df = pd.DataFrame()
                        # st.write(st.session_state)
                        for store_name, store_dict in st.session_state['df_dict'].items():
                            for platform in ['Shopee', 'Lazada', 'TikTok']:
                                if platform in store_dict.keys():
                                    df = store_dict[platform]
                                    result_df = pd.concat([result_df, df], axis = 1)
                        
                        result_df['sum'] = result_df.sum(axis = 1)
                        result_df['cumsum'] = result_df['sum'].cumsum()

                        st.session_state['result_df'] = result_df
                        
                        if st.session_state['result_df'][st.session_state['result_df']['cumsum'] >= 1800000].shape[0] > 0:
                            col1, col2, col3 = st.columns(3)
                            col1.metric("‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏î VAT ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á?", 
                                        "üî¥ Yes", 
                                        border = True
                                        )
                            col2.metric(f"‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏õ‡∏µ {selected_year}", 
                                        '{:.2f} M'.format(st.session_state['total_sale']/1000000),
                                        border = True
                                        )
                            col3.metric('‡∏¢‡∏≠‡∏î‡∏ñ‡∏∂‡∏á 1.8 M ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà',
                                        pd.to_datetime(result_df[result_df["cumsum"] >= 1800000].index[0], format = "%Y-%m-%d").strftime("%d %b %Y"), 
                                        border = True
                                        )
                        
                        else:
                            if st.session_state['result_df'][st.session_state['result_df']['cumsum'] >= 1800000].shape[0] > 1500000 and st.session_state['result_df'][st.session_state['result_df']['cumsum'] >= 1800000].shape[0] < 1800000:
                                col1, col2 = st.columns(2)
                                col1.metric("‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏î VAT ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á?", 
                                            "üü° No", 
                                            border = True
                                            )
                            else:
                                col1, col2 = st.columns(2)
                                col1.metric("‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏î VAT ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á?", 
                                            "üü¢ No", 
                                            border = True
                                            )
                                
                            col2.metric("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°", 
                                        '{:.2f} M'.format(st.session_state['total_sale']/1000000),
                                        border = True
                                        )

                            
                        st.markdown('<hr style="margin-top: 0px; margin-bottom: 0px;">', unsafe_allow_html=True)
                        st.write('')
                        st.write('')
                        # st.subheader('4. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå')

                        # Initialize session state for buttons
                        if "form_submitted" not in st.session_state:
                            st.session_state.form_submitted = False  # Tracks form submission


                        # **Only show form if calculation is completed**
                        if 'result_df' in st.session_state.keys():
                            with st.form("my_form"):
                                st.markdown(f'<h5 style="text-align: center">&nbsp;&nbsp;üìã ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏≤‡∏á Email üìã</h5>', unsafe_allow_html=True)

                                email_input = st.text_input("üìß Email", placeholder="your-email@email.com")
                                email_valid = True
                                if email_input:
                                    if '@' not in email_input:
                                        st.error('üö® Email ‡∏ú‡∏¥‡∏î format (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ @)')
                                        email_valid = False
                                    elif email_input.split('@')[-1] not in ['gmail.com', 'yahoo.com', 'yahoo.co.th', 'outlook.com', 'hotmail.com', 'live.com']:
                                        st.error('üö® ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡πà gmail, yahoo, outlook, hotmail, live')
                                        email_valid = False
                                else:
                                    email_valid = False  # Email is required

                                user_name = st.text_input("üë§ ‡∏ä‡∏∑‡πà‡∏≠")
                                user_surname = st.text_input("üë§ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•")
                                
                                user_type = st.radio("üìå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", ["‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤", "‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•"], index=0, horizontal=True)
                                agree = st.checkbox("‚úÖ ‡∏â‡∏±‡∏ô‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì VAT")

                                col1, col2, col3 = st.columns(3)
                                with col2:
                                    submit_button = st.form_submit_button("üì© ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì", use_container_width=True)

                            # **Handle Form Submission**
                            if submit_button:
                                if email_input.strip() and user_name.strip() and user_surname.strip() and agree:
                                    st.session_state.form_submitted = True  # Mark form as submitted
                                    st.success("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•...")
                                else:
                                    st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î Submit!")

                        # # Gmail credentials
                        EMAIL_SENDER = st.secrets["email"]["EMAIL_SENDER"]
                        EMAIL_PASSWORD = st.secrets["email"]["EMAIL_PASSWORD"]  # Use App Password if 2FA is enabled

                        def send_email_with_attachment(receiver_email, df):
                            """Send an email with an in-memory Excel file containing the calculated DataFrame."""
                            try:
                                # Convert DataFrame to an in-memory Excel file
                                excel_buffer = io.BytesIO()
                                with pd.ExcelWriter(excel_buffer, engine="xlsxwriter") as writer:
                                    df.to_excel(writer, sheet_name="Total Sale Report")
                                excel_buffer.seek(0)  # Move to the beginning of the buffer

                                # Create email message
                                msg = EmailMessage()
                                msg["From"] = EMAIL_SENDER
                                msg["To"] = receiver_email,
                                msg["Subject"] = f"‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏° ‡∏õ‡∏µ {selected_year}"
                                msg.set_content("Attached is your total sale calculation report.")

                                # Attach in-memory Excel file
                                msg.add_attachment(
                                    excel_buffer.read(),
                                    maintype="application",
                                    subtype="vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                    filename=f"‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏õ‡∏µ {selected_year}.xlsx"
                                )

                                # Send email via Gmail SMTP server
                                with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
                                    server.login(EMAIL_SENDER, EMAIL_PASSWORD)
                                    server.send_message(msg)

                                # st.success(f"‚úÖ Email sent to {receiver_email}")
                                return True

                            except Exception as e:
                                st.error(f"‚ùå Error: {e}")
                                return False

                        # **Show Confirmation Message After Form Submission**
                        if st.session_state.form_submitted:
                            gdrive_credentials = json.loads(st.secrets["gdrive"]["GOOGLE_SHEETS_CREDENTIALS"])
                            scope = ["https://spreadsheets.google.com/feeds",'https://www.googleapis.com/auth/spreadsheets',"https://www.googleapis.com/auth/drive.file","https://www.googleapis.com/auth/drive"]
                            cerds = ServiceAccountCredentials.from_json_keyfile_dict(gdrive_credentials, scope)
                            client = gspread.authorize(cerds)
                            sheet = client.open("user_data").worksheet('check1.8') # ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏µ‡∏ï‡∏ô‡∏±‡πâ‡∏ô‡πÜ

                            sheet.append_row([
                                'check1.8', 
                                selected_year,
                                current_time.strftime('%Y-%m-%d %H:%M:%S'),
                                user_type,
                                user_name, 
                                user_surname, 
                                ', '.join(store_name_ls),
                                email_input,
                                st.session_state['total_sale']
                            ])
                        
                            send_email_with_attachment(receiver_email = email_input, df = result_df)
                            st.success(f"üì© ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á {email_input} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")


                        

            else:
                st.warning('‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå', icon = '‚ÑπÔ∏è')
        else:
            st.error('‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà tab ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö', icon="üö®")
    else:
        pass
######################        
elif sidebar_radio == '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì VAT':
    before_session_key = st.session_state.keys()
    
    st.header(f'üßæ {sidebar_radio}', divider = 'grey')
    st.write('')

    st.subheader('1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì VAT')
    selected_month = st.selectbox(
        label = 'select_month', 
        options = ([(pd.to_datetime('today').replace(day = 1) - pd.DateOffset(months = i)).strftime('%Y-%m') for i in range(1, 7)]), 
        index = 0, 
        placeholder = '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
        label_visibility = 'collapsed'
    )
    month = pd.to_datetime(selected_month.split('-')[-1], format = '%m').month
    year = pd.to_datetime(selected_month.split('-')[0], format = '%Y').year

    st.markdown('<hr style="margin-top: 0px; margin-bottom: 0px;">', unsafe_allow_html=True)


    if len([store_name for store_name in store_name_ls if store_name != '']) == store_number:
        st.write('')
            
        for i, store_name in enumerate(store_name_ls):
            st.subheader(f'2.{i + 1} {store_name}')
            st.write('')
            st.markdown(f'<h5>&nbsp;&nbsp;üóÇÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å platform ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà {store_name} ‡∏Ç‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà</h5>', unsafe_allow_html=True)
            selected_platfrom = st.multiselect(
                    label = f'‡πÄ‡∏•‡∏∑‡∏≠‡∏Å platform ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà **{store_name}** ‡∏Ç‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà', 
                    options = ['Shopee', 'Lazada', 'TikTok'], 
                    default = ['Shopee', 'Lazada', 'TikTok'], 
                    placeholder = f'‡πÄ‡∏•‡∏∑‡∏≠‡∏Å e-commerce platform ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô {store_name} ‡∏Ç‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà', 
                    key = f'selected_platform_{store_name}', 
                    label_visibility = 'collapsed'
                )
            
            selected_platform = [p for p in ['Shopee', 'Lazada', 'TikTok'] if p in st.session_state[f'selected_platform_{store_name}']]

            st.write('')
            st.markdown(f'<h5>&nbsp;&nbsp;üóÇÔ∏è Upload ‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢</h5>', unsafe_allow_html=True)

            if selected_platform != []:
                # if  f'{store_name}_current_select_tab' not in st.session_state:
                #     st.session_state[f'{store_name}_current_select_sale_tab'] = selected_platform[0]

                sale_tabs = st.tabs([f'Upload file ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢: {platform}' for platform in selected_platform])
                for j, sale_tab in enumerate(sale_tabs):
                    with sale_tab:
                        sale_tab_name = selected_platform[j]
                        # st.write(tab_name)
                        # st.session_state[f'{store_name}_current_select_sale_tab'] = sale_tab_name
        
                        ################ upload shopee #################
                        if sale_tab_name == 'Shopee': 
                            with st.popover("üì• ‡∏Å‡∏î‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ Download ‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å Shopee", use_container_width = True):
                                st.write('''
                                    1. Log in ‡πÄ‡∏Ç‡πâ‡∏≤ Shopee Seller Center\n
                                    2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"\n
                                    3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"\n
                                    4. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î"\n 
                                    5. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤\n
                                    \n
                                    ** **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏**: ‡πÉ‡∏´‡πâ‡∏Å‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì VAT
                                ''')
                            shopee_monthly_sale_file = st.file_uploader(
                                label = f'** ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î 1 ‡πÑ‡∏ü‡∏•‡πå (.xlsx)', 
                                accept_multiple_files = False,
                                type = 'xlsx', 
                                key = f"monthly_sale_file_{store_name}_{sale_tab_name}"
                            )

                            if shopee_monthly_sale_file != None and shopee_monthly_sale_file != []:
                                st.success(f'‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', icon="‚úÖ")
                            else:
                                st.warning(f'‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å Shopee ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß tab ‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß', icon="‚ÑπÔ∏è")
                            
                        ################# upload lazada #################
                        elif sale_tab_name == 'Lazada':
                            with st.popover("üì• ‡∏Å‡∏î‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ Download ‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å Lazada", use_container_width = True):
                                st.write('''
                                    1. Log in ‡πÄ‡∏Ç‡πâ‡∏≤ Lazada Seller Center
                                    2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"\n
                                    3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"\n
                                    4. ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" -> "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á" ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤\n 
                                    5. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Export" ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Export All"\n
                                ''')
                            lazada_monthly_sale_file = st.file_uploader(
                                label = f'** ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î 1 ‡πÑ‡∏ü‡∏•‡πå (.xlsx)', 
                                accept_multiple_files = False, 
                                type = 'xlsx',
                                key = f'monthly_sale_file_{store_name}_{sale_tab_name}'
                            )
                            if lazada_monthly_sale_file != None:
                                st.success(f'‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', icon="‚úÖ")
                            else:
                                st.warning(f'‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å Lazada ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß tab ‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß', icon="‚ÑπÔ∏è")

                        ################# upload TikTok #################
                        elif sale_tab_name == 'TikTok':    
                            with st.popover("üì• ‡∏Å‡∏î‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ Download ‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å TikTok", use_container_width = True):
                                st.write('''
                                    1. Log in ‡πÄ‡∏Ç‡πâ‡∏≤ TikTok Seller Center
                                    2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" -> "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"\n
                                    3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"\n
                                    4. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á"\n 
                                    5. ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á "‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á" ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£\n
                                    6. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ"\n
                                    7. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î"\n
                                    8. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "CSV" ‡πÅ‡∏•‡∏∞‡∏Å‡∏î "‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å"\n
                                    9. ‡∏Å‡∏î "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î"\n     
                                ''')
                            tiktok_monthly_sale_file = st.file_uploader(
                                label = f'** ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î 1 ‡πÑ‡∏ü‡∏•‡πå (.xlsx)', 
                                accept_multiple_files = False, 
                                type = 'csv',
                                key = f'monthly_sale_file_{store_name}_{sale_tab_name}'
                            )   
                            if tiktok_monthly_sale_file != None:
                                st.success(f'‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', icon="‚úÖ")
                            else:
                                st.warning(f'‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å TikTok ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß tab ‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß', icon="‚ÑπÔ∏è")

                st.write('')
                st.markdown(f'<h5>&nbsp;&nbsp;üóÇÔ∏è Upload ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°</h5>', unsafe_allow_html=True)

                commission_tabs = st.tabs([f'Upload file ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°: {platform}' for platform in selected_platform])
                for k, commission_tab in enumerate(commission_tabs):
                    with commission_tab:
                        commission_tab_name = selected_platform[k]
                        # st.write(tab_name)
                        # st.session_state[f'{store_name}_current_select_commission_tab'] = commission_tab_name

                        if commission_tab_name == 'Shopee': 
                            with st.popover("üì• ‡∏Å‡∏î‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ Download ‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° Shopee", use_container_width = True):
                                st.write('''
                                    1. Log in ‡πÄ‡∏Ç‡πâ‡∏≤ Shopee Seller Center
                                    2. ‡∏ó‡∏µ‡πà tab ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"\n
                                    3. ‡∏ó‡∏µ‡πà tab ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "My Tax Invoices"\n
                                    4. ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ "‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ"\n 
                                    5. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì VAT\n
                                    6. ‡∏Å‡∏î "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"\n
                                ''')
                            shopee_commission_file = st.file_uploader(
                                label = f'** ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î 1 ‡πÑ‡∏ü‡∏•‡πå (.zip)', 
                                accept_multiple_files = False,
                                type = 'zip', 
                                key = f"commission_file_{store_name}_{commission_tab_name}"
                            )

                            if shopee_commission_file != None:
                                st.success(f'‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', icon="‚úÖ")
                            else:
                                st.warning(f'‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° Shopee ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß tab ‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß', icon="‚ÑπÔ∏è")

                        elif commission_tab_name == 'Lazada':
                            with st.popover("üì• ‡∏Å‡∏î‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ Download ‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å Lazada", use_container_width = True):
                                st.write('''
                                    1. Log in ‡πÄ‡∏Ç‡πâ‡∏≤ Lazada Seller Center
                                    2. ‡∏ó‡∏µ‡πà tab "‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô" ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"\n
                                    3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡∏•‡∏î‡∏´‡∏ô‡∏µ‡πâ"\n
                                    4. ‡∏ó‡∏µ‡πà tab "‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ" ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "LAZADA"\n 
                                    5. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ "‡∏£‡∏≠‡∏ö‡∏ö‡∏¥‡∏•" ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì VAT\n
                                ''')
                                st.warning('LAZADA ‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏Ñ‡∏£‡πà‡∏≠‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ" ‡πÅ‡∏•‡∏∞‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏Ñ‡∏£‡πà‡∏≠‡∏°‡∏õ‡∏•‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ (‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)"', icon="‚ÑπÔ∏è")
                            lazada_commission_files = st.file_uploader(
                                label = f'** ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô (.pdf)', 
                                accept_multiple_files = True, 
                                type = 'pdf',
                                key = f'commission_file_{store_name}_{commission_tab_name}'
                            )
                            if lazada_commission_files != None and lazada_commission_files != []:
                                st.success(f'‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå {len(lazada_commission_files)} ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', icon="‚úÖ")
                            else:
                                st.warning(f'‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° Shopee ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß tab ‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß', icon="‚ÑπÔ∏è")

                        elif commission_tab_name == 'TikTok':
                            with st.popover("üì• ‡∏Å‡∏î‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ Download ‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° TikTok", use_container_width = True):
                                st.write('''
                                    1. Log in ‡πÄ‡∏Ç‡πâ‡∏≤ TikTok Seller Center
                                    2. ‡∏ó‡∏µ‡πà tab "‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô" ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ"\n
                                    3. ‡∏Å‡∏î "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î"\n
                                    4. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°"\n 
                                    5. ‡∏Å‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì VAT\n
                                    6. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏™‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß"
                                ''')
                                st.warning('TikTok ‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡πà‡∏≠‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡∏â‡∏ô‡∏±‡πâ‡∏ô ‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≤‡∏ß‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏∂‡∏á‡∏Ñ‡∏ß‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏™‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß"', icon="‚ÑπÔ∏è")
                            tiktok_commission_file = st.file_uploader(
                                label = f'** ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î 1 ‡πÑ‡∏ü‡∏•‡πå (.zip)', 
                                accept_multiple_files = False,
                                type = 'zip', 
                                key = f"commission_file_{store_name}_{commission_tab_name}"
                            )

                            if tiktok_commission_file != None:
                                st.success(f'‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', icon="‚úÖ")
                            else:
                                st.warning(f'‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° Shopee ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß tab ‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß', icon="‚ÑπÔ∏è")
                # st.write('')
                st.markdown('<hr style="margin-top: 0px; margin-bottom: 0px;">', unsafe_allow_html=True)

            # ‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tab platform ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
            
            for platform in ['Shopee', 'Lazada', 'TikTok']:
                if platform not in selected_platform:
                    if f'monthly_sale_file_{store_name}_{platform}' in st.session_state.keys():
                        del st.session_state[f'monthly_sale_file_{store_name}_{platform}']
                    if f"commission_file_{store_name}_{platform}" in st.session_state.keys():
                        del st.session_state[f"commission_file_{store_name}_{platform}"]
            
            st.write('')
            # st.markdown('<hr style="margin-top: 0px; margin-bottom: 0px;">', unsafe_allow_html=True)

        #‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ ‡∏•‡∏ö‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏õ
        del_ls = []
        for key in st.session_state:
            if 'selected_platform' in key:
                store_name = key.replace('selected_platform_', '')
                if store_name not in store_name_ls:
                    if key in st.session_state.keys():
                        del st.session_state[key]
                    # if f'{store_name}_current_select_sale_tab' in st.session_state.keys():
                    #     del st.session_state[f'{store_name}_current_select_sale_tab']
                    # if f'{store_name}_current_select_commission_tab' in st.session_state.keys():
                    #     del st.session_state[f'{store_name}_current_select_commission_tab']
                    if f'monthly_sale_file_{store_name}_Shopee' in st.session_state.keys():
                        del st.session_state[f'monthly_sale_file_{store_name}_Shopee']
                    if f'monthly_sale_file_{store_name}_Lazada' in st.session_state.keys():
                        del st.session_state[f'monthly_sale_file_{store_name}_Lazada']
                    if f'monthly_sale_file_{store_name}_TikTok' in st.session_state.keys():
                        del st.session_state[f'monthly_sale_file_{store_name}_TikTok']
                    if f'commission_file_{store_name}_Shopee' in st.session_state.keys():
                        del st.session_state[f'commission_file_{store_name}_Shopee']
                    if f'commission_file_{store_name}_Lazada' in st.session_state.keys():
                        del st.session_state[f'commission_file_{store_name}_Lazada']
                    if f'commission_file_{store_name}_TikTok' in st.session_state.keys():
                        del st.session_state[f'commission_file_{store_name}_TikTok']
        # st.write(st.session_state)


        selected_platform_d = {key: value for key, value in st.session_state.items() if 'selected_platform' in key if value != []}
        # st.write(selected_platform_d)
        check_ls = []
        if selected_platform_d != {}:
            for store, platform_ls in selected_platform_d.items():
                store_name = store.replace('selected_platform_', '')
                for platform in platform_ls:
                    if f'monthly_sale_file_{store_name}_{platform}' not in st.session_state.keys():
                        check_ls.append(f'‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ ‡∏£‡πâ‡∏≤‡∏ô {store_name} {platform}')
                    else:
                        if st.session_state[f'monthly_sale_file_{store_name}_{platform}'] == None or st.session_state[f'monthly_sale_file_{store_name}_{platform}'] == []:
                            check_ls.append(f'‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ ‡∏£‡πâ‡∏≤‡∏ô {store_name} ({platform})')

                    if f'commission_file_{store_name}_{platform}' not in st.session_state.keys():
                        check_ls.append(f'‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° ‡∏£‡πâ‡∏≤‡∏ô {store_name} {platform}')
                    else:
                        if st.session_state[f'commission_file_{store_name}_{platform}'] == None or st.session_state[f'commission_file_{store_name}_{platform}'] == []:
                            check_ls.append(f'‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° ‡∏£‡πâ‡∏≤‡∏ô {store_name} ({platform})')

        else:
            check_ls.append('')


        if check_ls == []: #‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß
            if 'vat_calculate_clicked' not in st.session_state or before_session_key != st.session_state.keys():
                st.session_state['vat_calculate_clicked'] = False

            if "selected_tax_id" not in st.session_state:
                st.session_state.selected_tax_id = set()
            
            if 'sale_d' not in st.session_state:
                st.session_state['sale_d'] = {}
            
            if 'commission_d' not in st.session_state:
                st.session_state['commission_d'] = {}
            

            cal_col1, cal_col2, cal_col3 = st.columns([2, 1, 2])
            with cal_col2:
                if st.button('üì¨ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì', use_container_width = True):
                    st.session_state['vat_calculate_clicked'] = True
                    st.session_state.selected_tax_id = set()

            if st.session_state.vat_calculate_clicked:
                #‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ‡πÉ‡∏´‡πâ reset ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô {} ‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏•‡∏±‡∏ß‡πÑ‡∏õ‡∏ú‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°
                st.session_state['sale_d'] = {}
                st.session_state['commission_d'] = {}

                cont=True
                for key, value in st.session_state.items(): #value = uploaded file
                    # if value != None:
                    ############## sale ##############
                    if 'monthly_sale_file_' in key and 'Shopee' in key:
                        store = key.split('_')[-2]
                        if store not in st.session_state['sale_d'].keys():
                            st.session_state['sale_d'][store] = {}

                        st.session_state['sale_d'][store]['Shopee'] = vat_cal_sale_shopee(shopee_sale_file = value, year = year, store = store, month = month)

                    elif 'monthly_sale_file_' in key and 'Lazada' in key:
                        store = key.split('_')[-2]
                        if store not in st.session_state['sale_d'].keys():
                            st.session_state['sale_d'][store] = {}

                        st.session_state['sale_d'][store]['Lazada'] = vat_cal_sale_lazada(lazada_sale_file = value, year = year, store = store, month = month)

                    elif 'monthly_sale_file_' in key and 'TikTok' in key:
                        store = key.split('_')[-2]
                        if store not in st.session_state['sale_d'].keys():
                            st.session_state['sale_d'][store] = {}

                        st.session_state['sale_d'][store]['TikTok'] = vat_cal_sale_tiktok(tiktok_sale_file = value, year = year, store = store, month = month)

                    ############## commission ##############
                    elif 'commission_file_' in key and 'Shopee' in key:
                        store = key.split('_')[-2]
                        if store not in st.session_state['commission_d'].keys():
                            st.session_state['commission_d'][store] = {}

                        st.session_state['commission_d'][store]['Shopee'] = vat_cal_commission_shopee(store_name = store, shopee_zip_file = value, month = month, year = year) 

                    elif 'commission_file_' in key and 'Lazada' in key:
                        store = key.split('_')[-2]
                        if store not in st.session_state['commission_d'].keys():
                            st.session_state['commission_d'][store] = {}

                        st.session_state['commission_d'][store]['Lazada'] = vat_cal_commission_lazada(store_name = store, lazada_file_ls = value, month = month, year = year)

                    elif 'commission_file_' in key and 'TikTok' in key:
                        store = key.split('_')[-2]

                        if store not in st.session_state['commission_d'].keys():
                            st.session_state['commission_d'][store] = {}

                        st.session_state['commission_d'][store]['TikTok'] = vat_cal_commission_tiktok(store_name = store, tiktok_zip_file = value, month = month, year =year) 
            
                    
                    # else:
                        #‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ
                        # pass

                # st.write(st.session_state)
                ############# merge data ##############  
                sale_df = pd.DataFrame()
                commission_df = pd.DataFrame()
                pdf_df = pd.DataFrame()
                for store in store_name_ls:
                    for platform in ['Shopee', 'Lazada', 'TikTok']:
                        if store in st.session_state['sale_d'].keys():
                            if platform in st.session_state['sale_d'][store].keys() and platform in st.session_state[f'selected_platform_{store}']:
                                sale_df = pd.concat([sale_df, st.session_state['sale_d'][store][platform]])

                        if store in st.session_state['commission_d'].keys():
                            if platform in st.session_state['commission_d'][store].keys() and platform in st.session_state[f'selected_platform_{store}']:
                                commission_df = pd.concat([commission_df, st.session_state['commission_d'][store][platform]['commission_df']], axis = 0).reset_index(drop = True)
                                pdf_df = pd.concat([pdf_df, st.session_state['commission_d'][store][platform]['pdf_df']], axis = 0).reset_index(drop = True)


                # ‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πâ‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ä‡∏∑‡πà‡∏≠ --> split df
                if len(commission_df['company_tax_id'].str.lower().str.replace(' ', '').unique()) > 1:
                    st.subheader('5. check')
                    st.warning('‡πÄ‡∏à‡∏≠‡∏ä‡∏∑‡πà‡∏≠ ‡∏ö ‡πÉ‡∏ô‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ä‡∏∑‡πà‡∏≠ --> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡πà‡∏≤‡∏¢ VAT ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', icon="‚ö†Ô∏è")

                    unique_company_tax_id = commission_df['company_tax_id'].str.replace(' ', '').unique().tolist()

                    for tax_id in unique_company_tax_id:
                        # Create a section for each unique name
                        name = commission_df[commission_df['company_tax_id'] == tax_id]['company_name'].tolist()[0]
                        is_checked = st.checkbox(name, key = f"checkbox_{tax_id}")

                        # Update the set of selected names based on the checkbox state
                        if is_checked:
                            st.session_state.selected_tax_id.add(tax_id)
                        else:
                            st.session_state.selected_tax_id.discard(tax_id)

                        # Show filtered dataframe for the name
                        filtered_commission_df = commission_df[commission_df["company_tax_id"] == tax_id]
                        # filtered_pdf_df = pdf_df[pdf_df['company_tax_id']== tax_id]
                        # st.dataframe(filtered_pdf_df)
                        st.dataframe(filtered_commission_df)

                    finish_tick_col1, finish_tick_col2, finish_tick_col3 = st.columns([2, 1, 2])
                    with finish_tick_col2:
                        if st.button('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà', use_container_width=True):
                            commission_df1 = commission_df[commission_df["company_tax_id"].isin(st.session_state['selected_tax_id'])].sort_values(by = ['store_name', 'platform', 'doc_date', 'doc_num'], ascending = [True, True, True, True]).reset_index(drop = True)

                            pdf_df1 = pdf_df[pdf_df["company_tax_id"].isin(st.session_state['selected_tax_id'])].sort_values(by = ['store_name', 'platform', 'doc_date', 'doc_num'], ascending = [True, True, True, True]).reset_index(drop = True)
                            
                            ready_to_download = True
                            # st.divider()
                        else:
                            ready_to_download = False
                
                    
                else: 
                    ready_to_download = True
                    commission_df1 = commission_df.sort_values(by = ['store_name', 'platform', 'doc_date', 'doc_num'], ascending = [True, True, True, True]).reset_index(drop = True)
                    pdf_df1 = pdf_df
                    # st.divider()

                if ready_to_download:
                    vat_report_col1, vat_report_col2, vat_report_col3 = st.columns(3)
                    vat_report_col1.metric(
                        label = '‡∏†‡∏≤‡∏©‡∏µ‡∏Ç‡∏≤‡∏¢ (THB)', 
                        value = "{:,.2f}".format(sale_df["vat"].sum()), 
                        border = True
                    )
                    vat_report_col2.metric(
                        label = '‡∏†‡∏≤‡∏©‡∏µ‡∏ã‡∏∑‡πâ‡∏≠ (THB)', 
                        value = "{:,.2f}".format(commission_df1["vat"].sum()), 
                        border = True
                    )
                    vat_report_col3.metric(
                        label = 'VAT ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢ (THB)', 
                        value = "{:,.2f}".format(sale_df["vat"].sum() - commission_df1["vat"].sum()), 
                        border = True
                    )

                merged_pdf_d = {}
                for store in pdf_df1['store_name'].unique():
                    
                    df1 = pdf_df1[pdf_df1['store_name'] == store].reset_index(drop = True)
                    
                    for platform in df1['platform'].unique():
                        df2 = df1[df1['platform'] == platform].reset_index(drop = True)

                        merger = PdfMerger()
                        for pdf in df2.sort_values(by = 'doc_date', ascending = True)['pdf_file']:

                            merger.append(pdf)

                        merged_pdf = BytesIO()
                        merger.write(merged_pdf)
                        merger.close()

                        merged_pdf.seek(0)

                        merged_pdf_d[f'{store}_{platform}_commission_receipt'] = merged_pdf
                    
                zip_buffer = BytesIO()
                with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED) as zipf:
                    
                    for i, df in enumerate([sale_df, commission_df1]):
                        excel_buffer = BytesIO()
                        with pd.ExcelWriter(excel_buffer, engine='xlsxwriter') as writer:
                            df.to_excel(writer, index=False, sheet_name="Sheet1")

                            # **Auto-adjust column width**
                            workbook = writer.book
                            worksheet = writer.sheets["Sheet1"]
                            for col_num, column in enumerate(df.columns):
                                max_length = max(df[column].astype(str).apply(len).max(), len(column))
                                worksheet.set_column(col_num, col_num, max_length)
                            
                        excel_buffer.seek(0)

                        zipf.writestr(f'‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡∏Ç‡∏≤‡∏¢_{month}-{year}.xlsx' if i == 0 else f'‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡∏ã‡∏∑‡πâ‡∏≠_{month}-{year}.xlsx', excel_buffer.read())

                    for key, value in merged_pdf_d.items():
                        zipf.writestr(f"{key}.pdf", value.read())

                zip_buffer.seek(0)


                st.markdown('<hr style="margin-top: 0px; margin-bottom: 0px;">', unsafe_allow_html=True)
                st.subheader('4. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå')

                # Initialize session state for buttons
                if "form_submitted" not in st.session_state:
                    st.session_state.form_submitted = False  # Tracks form submission


                # **Only show form if calculation is completed**

                with st.form("my_form"):
                    st.write("üìã **‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì VAT**")

                    email_input = st.text_input("üìß Email", placeholder="your-email@email.com")
                    email_valid = True
                    if email_input:
                        if '@' not in email_input:
                            st.error('üö® Email ‡∏ú‡∏¥‡∏î format (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ @)')
                            email_valid = False
                        elif email_input.split('@')[-1] not in ['gmail.com', 'yahoo.com', 'yahoo.co.th', 'outlook.com', 'hotmail.com', 'live.com']:
                            st.error('üö® ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡πà gmail, yahoo, outlook, hotmail, live')
                            email_valid = False
                    else:
                        email_valid = False  # Email is required

                    user_name = st.text_input("üë§ ‡∏ä‡∏∑‡πà‡∏≠")
                    user_surname = st.text_input("üë§ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•")
                    
                    user_type = st.radio("üìå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", ["‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤", "‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•"], index=0, horizontal=True)
                    agree = st.checkbox("‚úÖ ‡∏â‡∏±‡∏ô‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì VAT")

                    col1, col2, col3 = st.columns(3)
                    with col2:
                        submit_button = st.form_submit_button("üì© Submit", use_container_width=True)

                    # **Handle Form Submission**
                    if submit_button:
                        gdrive_credentials = json.loads(st.secrets["gdrive"]["GOOGLE_SHEETS_CREDENTIALS"])
                        scope = ["https://spreadsheets.google.com/feeds",'https://www.googleapis.com/auth/spreadsheets',"https://www.googleapis.com/auth/drive.file","https://www.googleapis.com/auth/drive"]
                        cerds = ServiceAccountCredentials.from_json_keyfile_dict(gdrive_credentials, scope)
                        client = gspread.authorize(cerds)
                        sheet = client.open("user_data").worksheet('vat_cal') # ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏µ‡∏ï‡∏ô‡∏±‡πâ‡∏ô‡πÜ

                        sheet.append_row([
                            'vat_cal', 
                            selected_month,
                            pd.to_datetime('today').strftime('%Y-%m-%d %H:%M:%S'),
                            user_type,
                            user_name, 
                            user_surname, 
                            ', '.join(store_name_ls),
                            email_input,
                            sale_df["vat"].sum()
                        ])
                        
                        if email_input.strip() and user_name.strip() and user_surname.strip() and agree:
                            st.session_state.form_submitted = True  # Mark form as submitted
                            st.success("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•...")
                            # st.write([email_input, user_name, user_surname, user_type, agree])
                        else:
                            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î Submit!")

                    # # Gmail credentials
                        EMAIL_SENDER = st.secrets["email"]["EMAIL_SENDER"]
                        EMAIL_PASSWORD = st.secrets["email"]["EMAIL_PASSWORD"]  # Use App Password if 2FA is enabled

                        def send_email_with_zip_attachment(receiver_email, zip_buffer):
                            """Send an email with an in-memory Excel file containing the calculated DataFrame."""
                            try:
                                # Create email message
                                msg = EmailMessage()
                                msg["From"] = EMAIL_SENDER
                                msg["To"] = receiver_email,
                                msg["Subject"] = "VAT Calculation"
                                msg.set_content("Attached is your VAT calculation report.")

                                # Attach in-memory Excel file
                                msg.add_attachment(
                                    zip_buffer.read(),
                                    maintype="application",
                                    subtype="zip",
                                    filename="zip_file.zip"
                                )

                                # Send email via Gmail SMTP server
                                with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
                                    server.login(EMAIL_SENDER, EMAIL_PASSWORD)
                                    server.send_message(msg)

                                st.success(f"‚úÖ Email sent to {receiver_email}")
                                return True

                            except Exception as e:
                                st.error(f"‚ùå Error: {e}")
                                return False

                        success = send_email_with_zip_attachment(receiver_email = email_input, zip_buffer=zip_buffer)
                    else:
                        st.success("üì© ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

                # download_col1, download_col2, doanload_col3 = st.columns([2, 1, 2])
                # with download_col2:
                #     st.download_button(
                #                 label = "download final file",
                #                 data = buffer,
                #                 file_name = f"‡∏¢‡∏≠‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏∑‡πà‡∏ôvat_{month}{year}.zip",
                #                 mime = "application/zip",
                #                 key="download_vat_button", 
                #                 use_container_width=True
                #         )


                

            else:
                #‡∏õ‡∏∏‡πà‡∏° calculate ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å click
                pass
        else:
            st.warning('‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå', icon = '‚ÑπÔ∏è')
    else:
        st.error('‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà tab ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö', icon="üö®")
            

# %%
elif sidebar_radio == 'Q&A':
    st.header(f'üí° {sidebar_radio}', divider='grey')

    qa_df = pd.read_csv('qa.csv').sort_values(by = 'order', ascending = True).reset_index(drop = True)
    for i in range(qa_df.shape[0]):
        # st.write(i)
        q = qa_df.iloc[i, 1]
        a = qa_df.iloc[i, 2]
        # st.markdown(f'<h4>üü¢ {q}?</h4>', unsafe_allow_html=True)
        with st.expander(q, icon = 'üìå'):
            st.write(a)
        # st.write('')
        st.write('')
        # st.subheader(f'{i + 1}. {q}?')
        # st.write(f'- {a}')
        # st.write('')
